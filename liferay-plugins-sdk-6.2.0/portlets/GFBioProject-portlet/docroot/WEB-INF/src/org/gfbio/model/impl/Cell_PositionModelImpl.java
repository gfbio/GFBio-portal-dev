/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.gfbio.model.Cell_Position;
import org.gfbio.model.Cell_PositionModel;
import org.gfbio.model.Cell_PositionSoap;

import org.gfbio.service.persistence.Cell_PositionPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Cell_Position service. Represents a row in the &quot;gfbio_Cell_Position&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.Cell_PositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Cell_PositionImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see Cell_PositionImpl
 * @see org.gfbio.model.Cell_Position
 * @see org.gfbio.model.Cell_PositionModel
 * @generated
 */
@JSON(strict = true)
public class Cell_PositionModelImpl extends BaseModelImpl<Cell_Position>
	implements Cell_PositionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cell_ position model instance should use the {@link org.gfbio.model.Cell_Position} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Cell_Position";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cellID", Types.BIGINT },
			{ "positionID", Types.BIGINT },
			{ "column_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Cell_Position (cellID LONG not null,positionID LONG not null,column_ INTEGER,primary key (cellID, positionID))";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Cell_Position";
	public static final String ORDER_BY_JPQL = " ORDER BY cell_Position.id.cellID ASC, cell_Position.id.positionID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Cell_Position.cellID ASC, gfbio_Cell_Position.positionID ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Cell_Position"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Cell_Position"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Cell_Position"),
			true);
	public static long CELLID_COLUMN_BITMASK = 1L;
	public static long COLUMN_COLUMN_BITMASK = 2L;
	public static long POSITIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Cell_Position toModel(Cell_PositionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Cell_Position model = new Cell_PositionImpl();

		model.setCellID(soapModel.getCellID());
		model.setPositionID(soapModel.getPositionID());
		model.setColumn(soapModel.getColumn());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Cell_Position> toModels(Cell_PositionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Cell_Position> models = new ArrayList<Cell_Position>(soapModels.length);

		for (Cell_PositionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Cell_Position"));

	public Cell_PositionModelImpl() {
	}

	@Override
	public Cell_PositionPK getPrimaryKey() {
		return new Cell_PositionPK(_cellID, _positionID);
	}

	@Override
	public void setPrimaryKey(Cell_PositionPK primaryKey) {
		setCellID(primaryKey.cellID);
		setPositionID(primaryKey.positionID);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Cell_PositionPK(_cellID, _positionID);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Cell_PositionPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Cell_Position.class;
	}

	@Override
	public String getModelClassName() {
		return Cell_Position.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cellID", getCellID());
		attributes.put("positionID", getPositionID());
		attributes.put("column", getColumn());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cellID = (Long)attributes.get("cellID");

		if (cellID != null) {
			setCellID(cellID);
		}

		Long positionID = (Long)attributes.get("positionID");

		if (positionID != null) {
			setPositionID(positionID);
		}

		Integer column = (Integer)attributes.get("column");

		if (column != null) {
			setColumn(column);
		}
	}

	@JSON
	@Override
	public long getCellID() {
		return _cellID;
	}

	@Override
	public void setCellID(long cellID) {
		_columnBitmask |= CELLID_COLUMN_BITMASK;

		if (!_setOriginalCellID) {
			_setOriginalCellID = true;

			_originalCellID = _cellID;
		}

		_cellID = cellID;
	}

	public long getOriginalCellID() {
		return _originalCellID;
	}

	@JSON
	@Override
	public long getPositionID() {
		return _positionID;
	}

	@Override
	public void setPositionID(long positionID) {
		_columnBitmask |= POSITIONID_COLUMN_BITMASK;

		if (!_setOriginalPositionID) {
			_setOriginalPositionID = true;

			_originalPositionID = _positionID;
		}

		_positionID = positionID;
	}

	public long getOriginalPositionID() {
		return _originalPositionID;
	}

	@JSON
	@Override
	public int getColumn() {
		return _column;
	}

	@Override
	public void setColumn(int column) {
		_columnBitmask |= COLUMN_COLUMN_BITMASK;

		if (!_setOriginalColumn) {
			_setOriginalColumn = true;

			_originalColumn = _column;
		}

		_column = column;
	}

	public int getOriginalColumn() {
		return _originalColumn;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Cell_Position toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Cell_Position)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Cell_PositionImpl cell_PositionImpl = new Cell_PositionImpl();

		cell_PositionImpl.setCellID(getCellID());
		cell_PositionImpl.setPositionID(getPositionID());
		cell_PositionImpl.setColumn(getColumn());

		cell_PositionImpl.resetOriginalValues();

		return cell_PositionImpl;
	}

	@Override
	public int compareTo(Cell_Position cell_Position) {
		Cell_PositionPK primaryKey = cell_Position.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cell_Position)) {
			return false;
		}

		Cell_Position cell_Position = (Cell_Position)obj;

		Cell_PositionPK primaryKey = cell_Position.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		Cell_PositionModelImpl cell_PositionModelImpl = this;

		cell_PositionModelImpl._originalCellID = cell_PositionModelImpl._cellID;

		cell_PositionModelImpl._setOriginalCellID = false;

		cell_PositionModelImpl._originalPositionID = cell_PositionModelImpl._positionID;

		cell_PositionModelImpl._setOriginalPositionID = false;

		cell_PositionModelImpl._originalColumn = cell_PositionModelImpl._column;

		cell_PositionModelImpl._setOriginalColumn = false;

		cell_PositionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Cell_Position> toCacheModel() {
		Cell_PositionCacheModel cell_PositionCacheModel = new Cell_PositionCacheModel();

		cell_PositionCacheModel.cellID = getCellID();

		cell_PositionCacheModel.positionID = getPositionID();

		cell_PositionCacheModel.column = getColumn();

		return cell_PositionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{cellID=");
		sb.append(getCellID());
		sb.append(", positionID=");
		sb.append(getPositionID());
		sb.append(", column=");
		sb.append(getColumn());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Cell_Position");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cellID</column-name><column-value><![CDATA[");
		sb.append(getCellID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionID</column-name><column-value><![CDATA[");
		sb.append(getPositionID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>column</column-name><column-value><![CDATA[");
		sb.append(getColumn());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Cell_Position.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Cell_Position.class
		};
	private long _cellID;
	private long _originalCellID;
	private boolean _setOriginalCellID;
	private long _positionID;
	private long _originalPositionID;
	private boolean _setOriginalPositionID;
	private int _column;
	private int _originalColumn;
	private boolean _setOriginalColumn;
	private long _columnBitmask;
	private Cell_Position _escapedModel;
}