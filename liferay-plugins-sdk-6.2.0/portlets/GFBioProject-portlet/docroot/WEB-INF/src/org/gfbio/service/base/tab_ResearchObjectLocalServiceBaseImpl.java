/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.gfbio.model.tab_ResearchObject;

import org.gfbio.service.persistence.ProjectPersistence;
import org.gfbio.service.persistence.tab_ResearchObjectPersistence;
import org.gfbio.service.tab_ResearchObjectLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tab_ research object local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.gfbio.service.impl.tab_ResearchObjectLocalServiceImpl}.
 * </p>
 *
 * @author Felicitas Loeffler
 * @see org.gfbio.service.impl.tab_ResearchObjectLocalServiceImpl
 * @see org.gfbio.service.tab_ResearchObjectLocalServiceUtil
 * @generated
 */
public abstract class tab_ResearchObjectLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements tab_ResearchObjectLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.gfbio.service.tab_ResearchObjectLocalServiceUtil} to access the tab_ research object local service.
	 */

	/**
	 * Adds the tab_ research object to the database. Also notifies the appropriate model listeners.
	 *
	 * @param tab_ResearchObject the tab_ research object
	 * @return the tab_ research object that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public tab_ResearchObject addtab_ResearchObject(
		tab_ResearchObject tab_ResearchObject) throws SystemException {
		tab_ResearchObject.setNew(true);

		return tab_ResearchObjectPersistence.update(tab_ResearchObject);
	}

	/**
	 * Creates a new tab_ research object with the primary key. Does not add the tab_ research object to the database.
	 *
	 * @param ro_ID the primary key for the new tab_ research object
	 * @return the new tab_ research object
	 */
	@Override
	public tab_ResearchObject createtab_ResearchObject(long ro_ID) {
		return tab_ResearchObjectPersistence.create(ro_ID);
	}

	/**
	 * Deletes the tab_ research object with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param ro_ID the primary key of the tab_ research object
	 * @return the tab_ research object that was removed
	 * @throws PortalException if a tab_ research object with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public tab_ResearchObject deletetab_ResearchObject(long ro_ID)
		throws PortalException, SystemException {
		return tab_ResearchObjectPersistence.remove(ro_ID);
	}

	/**
	 * Deletes the tab_ research object from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tab_ResearchObject the tab_ research object
	 * @return the tab_ research object that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public tab_ResearchObject deletetab_ResearchObject(
		tab_ResearchObject tab_ResearchObject) throws SystemException {
		return tab_ResearchObjectPersistence.remove(tab_ResearchObject);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(tab_ResearchObject.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return tab_ResearchObjectPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.gfbio.model.impl.tab_ResearchObjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return tab_ResearchObjectPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.gfbio.model.impl.tab_ResearchObjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return tab_ResearchObjectPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return tab_ResearchObjectPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return tab_ResearchObjectPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public tab_ResearchObject fetchtab_ResearchObject(long ro_ID)
		throws SystemException {
		return tab_ResearchObjectPersistence.fetchByPrimaryKey(ro_ID);
	}

	/**
	 * Returns the tab_ research object with the primary key.
	 *
	 * @param ro_ID the primary key of the tab_ research object
	 * @return the tab_ research object
	 * @throws PortalException if a tab_ research object with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public tab_ResearchObject gettab_ResearchObject(long ro_ID)
		throws PortalException, SystemException {
		return tab_ResearchObjectPersistence.findByPrimaryKey(ro_ID);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return tab_ResearchObjectPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the tab_ research objects.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.gfbio.model.impl.tab_ResearchObjectModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tab_ research objects
	 * @param end the upper bound of the range of tab_ research objects (not inclusive)
	 * @return the range of tab_ research objects
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<tab_ResearchObject> gettab_ResearchObjects(int start, int end)
		throws SystemException {
		return tab_ResearchObjectPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tab_ research objects.
	 *
	 * @return the number of tab_ research objects
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int gettab_ResearchObjectsCount() throws SystemException {
		return tab_ResearchObjectPersistence.countAll();
	}

	/**
	 * Updates the tab_ research object in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tab_ResearchObject the tab_ research object
	 * @return the tab_ research object that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public tab_ResearchObject updatetab_ResearchObject(
		tab_ResearchObject tab_ResearchObject) throws SystemException {
		return tab_ResearchObjectPersistence.update(tab_ResearchObject);
	}

	/**
	 * Returns the project local service.
	 *
	 * @return the project local service
	 */
	public org.gfbio.service.ProjectLocalService getProjectLocalService() {
		return projectLocalService;
	}

	/**
	 * Sets the project local service.
	 *
	 * @param projectLocalService the project local service
	 */
	public void setProjectLocalService(
		org.gfbio.service.ProjectLocalService projectLocalService) {
		this.projectLocalService = projectLocalService;
	}

	/**
	 * Returns the project remote service.
	 *
	 * @return the project remote service
	 */
	public org.gfbio.service.ProjectService getProjectService() {
		return projectService;
	}

	/**
	 * Sets the project remote service.
	 *
	 * @param projectService the project remote service
	 */
	public void setProjectService(
		org.gfbio.service.ProjectService projectService) {
		this.projectService = projectService;
	}

	/**
	 * Returns the project persistence.
	 *
	 * @return the project persistence
	 */
	public ProjectPersistence getProjectPersistence() {
		return projectPersistence;
	}

	/**
	 * Sets the project persistence.
	 *
	 * @param projectPersistence the project persistence
	 */
	public void setProjectPersistence(ProjectPersistence projectPersistence) {
		this.projectPersistence = projectPersistence;
	}

	/**
	 * Returns the tab_ research object local service.
	 *
	 * @return the tab_ research object local service
	 */
	public org.gfbio.service.tab_ResearchObjectLocalService gettab_ResearchObjectLocalService() {
		return tab_ResearchObjectLocalService;
	}

	/**
	 * Sets the tab_ research object local service.
	 *
	 * @param tab_ResearchObjectLocalService the tab_ research object local service
	 */
	public void settab_ResearchObjectLocalService(
		org.gfbio.service.tab_ResearchObjectLocalService tab_ResearchObjectLocalService) {
		this.tab_ResearchObjectLocalService = tab_ResearchObjectLocalService;
	}

	/**
	 * Returns the tab_ research object remote service.
	 *
	 * @return the tab_ research object remote service
	 */
	public org.gfbio.service.tab_ResearchObjectService gettab_ResearchObjectService() {
		return tab_ResearchObjectService;
	}

	/**
	 * Sets the tab_ research object remote service.
	 *
	 * @param tab_ResearchObjectService the tab_ research object remote service
	 */
	public void settab_ResearchObjectService(
		org.gfbio.service.tab_ResearchObjectService tab_ResearchObjectService) {
		this.tab_ResearchObjectService = tab_ResearchObjectService;
	}

	/**
	 * Returns the tab_ research object persistence.
	 *
	 * @return the tab_ research object persistence
	 */
	public tab_ResearchObjectPersistence gettab_ResearchObjectPersistence() {
		return tab_ResearchObjectPersistence;
	}

	/**
	 * Sets the tab_ research object persistence.
	 *
	 * @param tab_ResearchObjectPersistence the tab_ research object persistence
	 */
	public void settab_ResearchObjectPersistence(
		tab_ResearchObjectPersistence tab_ResearchObjectPersistence) {
		this.tab_ResearchObjectPersistence = tab_ResearchObjectPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.gfbio.model.tab_ResearchObject",
			tab_ResearchObjectLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.gfbio.model.tab_ResearchObject");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return tab_ResearchObject.class;
	}

	protected String getModelClassName() {
		return tab_ResearchObject.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = tab_ResearchObjectPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.gfbio.service.ProjectLocalService.class)
	protected org.gfbio.service.ProjectLocalService projectLocalService;
	@BeanReference(type = org.gfbio.service.ProjectService.class)
	protected org.gfbio.service.ProjectService projectService;
	@BeanReference(type = ProjectPersistence.class)
	protected ProjectPersistence projectPersistence;
	@BeanReference(type = org.gfbio.service.tab_ResearchObjectLocalService.class)
	protected org.gfbio.service.tab_ResearchObjectLocalService tab_ResearchObjectLocalService;
	@BeanReference(type = org.gfbio.service.tab_ResearchObjectService.class)
	protected org.gfbio.service.tab_ResearchObjectService tab_ResearchObjectService;
	@BeanReference(type = tab_ResearchObjectPersistence.class)
	protected tab_ResearchObjectPersistence tab_ResearchObjectPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private tab_ResearchObjectLocalServiceClpInvoker _clpInvoker = new tab_ResearchObjectLocalServiceClpInvoker();
}