/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.ResearchObject;
import org.gfbio.model.ResearchObjectModel;
import org.gfbio.model.ResearchObjectSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ResearchObject service. Represents a row in the &quot;gfbio_ResearchObject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.ResearchObjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResearchObjectImpl}.
 * </p>
 *
 * @author Felicitas Loeffler
 * @see ResearchObjectImpl
 * @see org.gfbio.model.ResearchObject
 * @see org.gfbio.model.ResearchObjectModel
 * @generated
 */
@JSON(strict = true)
public class ResearchObjectModelImpl extends BaseModelImpl<ResearchObject>
	implements ResearchObjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a research object model instance should use the {@link org.gfbio.model.ResearchObject} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_ResearchObject";
	public static final Object[][] TABLE_COLUMNS = {
			{ "researchobjectID", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "metadata", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_ResearchObject (researchobjectID LONG not null primary key,name VARCHAR(75) null,metadata VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_ResearchObject";
	public static final String ORDER_BY_JPQL = " ORDER BY researchObject.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_ResearchObject.name ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.ResearchObject"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.ResearchObject"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.ResearchObject"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ResearchObject toModel(ResearchObjectSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ResearchObject model = new ResearchObjectImpl();

		model.setResearchobjectID(soapModel.getResearchobjectID());
		model.setName(soapModel.getName());
		model.setMetadata(soapModel.getMetadata());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ResearchObject> toModels(ResearchObjectSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ResearchObject> models = new ArrayList<ResearchObject>(soapModels.length);

		for (ResearchObjectSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.ResearchObject"));

	public ResearchObjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _researchobjectID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setResearchobjectID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _researchobjectID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ResearchObject.class;
	}

	@Override
	public String getModelClassName() {
		return ResearchObject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("researchobjectID", getResearchobjectID());
		attributes.put("name", getName());
		attributes.put("metadata", getMetadata());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long researchobjectID = (Long)attributes.get("researchobjectID");

		if (researchobjectID != null) {
			setResearchobjectID(researchobjectID);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String metadata = (String)attributes.get("metadata");

		if (metadata != null) {
			setMetadata(metadata);
		}
	}

	@JSON
	@Override
	public long getResearchobjectID() {
		return _researchobjectID;
	}

	@Override
	public void setResearchobjectID(long researchobjectID) {
		_researchobjectID = researchobjectID;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getMetadata() {
		if (_metadata == null) {
			return StringPool.BLANK;
		}
		else {
			return _metadata;
		}
	}

	@Override
	public void setMetadata(String metadata) {
		_metadata = metadata;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ResearchObject.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ResearchObject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ResearchObject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ResearchObjectImpl researchObjectImpl = new ResearchObjectImpl();

		researchObjectImpl.setResearchobjectID(getResearchobjectID());
		researchObjectImpl.setName(getName());
		researchObjectImpl.setMetadata(getMetadata());

		researchObjectImpl.resetOriginalValues();

		return researchObjectImpl;
	}

	@Override
	public int compareTo(ResearchObject researchObject) {
		int value = 0;

		value = getName().compareTo(researchObject.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ResearchObject)) {
			return false;
		}

		ResearchObject researchObject = (ResearchObject)obj;

		long primaryKey = researchObject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ResearchObjectModelImpl researchObjectModelImpl = this;

		researchObjectModelImpl._originalName = researchObjectModelImpl._name;

		researchObjectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ResearchObject> toCacheModel() {
		ResearchObjectCacheModel researchObjectCacheModel = new ResearchObjectCacheModel();

		researchObjectCacheModel.researchobjectID = getResearchobjectID();

		researchObjectCacheModel.name = getName();

		String name = researchObjectCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			researchObjectCacheModel.name = null;
		}

		researchObjectCacheModel.metadata = getMetadata();

		String metadata = researchObjectCacheModel.metadata;

		if ((metadata != null) && (metadata.length() == 0)) {
			researchObjectCacheModel.metadata = null;
		}

		return researchObjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{researchobjectID=");
		sb.append(getResearchobjectID());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", metadata=");
		sb.append(getMetadata());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.ResearchObject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>researchobjectID</column-name><column-value><![CDATA[");
		sb.append(getResearchobjectID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metadata</column-name><column-value><![CDATA[");
		sb.append(getMetadata());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ResearchObject.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ResearchObject.class
		};
	private long _researchobjectID;
	private String _name;
	private String _originalName;
	private String _metadata;
	private long _columnBitmask;
	private ResearchObject _escapedModel;
}