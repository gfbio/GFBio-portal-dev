/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.Basket;
import org.gfbio.model.BasketModel;
import org.gfbio.model.BasketSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Basket service. Represents a row in the &quot;gfbio_Basket&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.BasketModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BasketImpl}.
 * </p>
 *
 * @author Felicitas Loeffler
 * @see BasketImpl
 * @see org.gfbio.model.Basket
 * @see org.gfbio.model.BasketModel
 * @generated
 */
@JSON(strict = true)
public class BasketModelImpl extends BaseModelImpl<Basket>
	implements BasketModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a basket model instance should use the {@link org.gfbio.model.Basket} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Basket";
	public static final Object[][] TABLE_COLUMNS = {
			{ "basketID", Types.BIGINT },
			{ "userID", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "basketJSON", Types.VARCHAR },
			{ "queryJSON", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Basket (basketID LONG not null primary key,userID LONG,name VARCHAR(75) null,basketJSON VARCHAR(75) null,queryJSON VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Basket";
	public static final String ORDER_BY_JPQL = " ORDER BY basket.basketID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Basket.basketID ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Basket"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Basket"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Basket"),
			true);
	public static long BASKETID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Basket toModel(BasketSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Basket model = new BasketImpl();

		model.setBasketID(soapModel.getBasketID());
		model.setUserID(soapModel.getUserID());
		model.setName(soapModel.getName());
		model.setBasketJSON(soapModel.getBasketJSON());
		model.setQueryJSON(soapModel.getQueryJSON());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Basket> toModels(BasketSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Basket> models = new ArrayList<Basket>(soapModels.length);

		for (BasketSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Basket"));

	public BasketModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _basketID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBasketID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _basketID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Basket.class;
	}

	@Override
	public String getModelClassName() {
		return Basket.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("basketID", getBasketID());
		attributes.put("userID", getUserID());
		attributes.put("name", getName());
		attributes.put("basketJSON", getBasketJSON());
		attributes.put("queryJSON", getQueryJSON());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long basketID = (Long)attributes.get("basketID");

		if (basketID != null) {
			setBasketID(basketID);
		}

		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String basketJSON = (String)attributes.get("basketJSON");

		if (basketJSON != null) {
			setBasketJSON(basketJSON);
		}

		String queryJSON = (String)attributes.get("queryJSON");

		if (queryJSON != null) {
			setQueryJSON(queryJSON);
		}
	}

	@JSON
	@Override
	public long getBasketID() {
		return _basketID;
	}

	@Override
	public void setBasketID(long basketID) {
		_columnBitmask |= BASKETID_COLUMN_BITMASK;

		if (!_setOriginalBasketID) {
			_setOriginalBasketID = true;

			_originalBasketID = _basketID;
		}

		_basketID = basketID;
	}

	public long getOriginalBasketID() {
		return _originalBasketID;
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserID) {
			_setOriginalUserID = true;

			_originalUserID = _userID;
		}

		_userID = userID;
	}

	public long getOriginalUserID() {
		return _originalUserID;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getBasketJSON() {
		if (_basketJSON == null) {
			return StringPool.BLANK;
		}
		else {
			return _basketJSON;
		}
	}

	@Override
	public void setBasketJSON(String basketJSON) {
		_basketJSON = basketJSON;
	}

	@JSON
	@Override
	public String getQueryJSON() {
		if (_queryJSON == null) {
			return StringPool.BLANK;
		}
		else {
			return _queryJSON;
		}
	}

	@Override
	public void setQueryJSON(String queryJSON) {
		_queryJSON = queryJSON;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Basket.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Basket toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Basket)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BasketImpl basketImpl = new BasketImpl();

		basketImpl.setBasketID(getBasketID());
		basketImpl.setUserID(getUserID());
		basketImpl.setName(getName());
		basketImpl.setBasketJSON(getBasketJSON());
		basketImpl.setQueryJSON(getQueryJSON());

		basketImpl.resetOriginalValues();

		return basketImpl;
	}

	@Override
	public int compareTo(Basket basket) {
		long primaryKey = basket.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Basket)) {
			return false;
		}

		Basket basket = (Basket)obj;

		long primaryKey = basket.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BasketModelImpl basketModelImpl = this;

		basketModelImpl._originalBasketID = basketModelImpl._basketID;

		basketModelImpl._setOriginalBasketID = false;

		basketModelImpl._originalUserID = basketModelImpl._userID;

		basketModelImpl._setOriginalUserID = false;

		basketModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Basket> toCacheModel() {
		BasketCacheModel basketCacheModel = new BasketCacheModel();

		basketCacheModel.basketID = getBasketID();

		basketCacheModel.userID = getUserID();

		basketCacheModel.name = getName();

		String name = basketCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			basketCacheModel.name = null;
		}

		basketCacheModel.basketJSON = getBasketJSON();

		String basketJSON = basketCacheModel.basketJSON;

		if ((basketJSON != null) && (basketJSON.length() == 0)) {
			basketCacheModel.basketJSON = null;
		}

		basketCacheModel.queryJSON = getQueryJSON();

		String queryJSON = basketCacheModel.queryJSON;

		if ((queryJSON != null) && (queryJSON.length() == 0)) {
			basketCacheModel.queryJSON = null;
		}

		return basketCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{basketID=");
		sb.append(getBasketID());
		sb.append(", userID=");
		sb.append(getUserID());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", basketJSON=");
		sb.append(getBasketJSON());
		sb.append(", queryJSON=");
		sb.append(getQueryJSON());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Basket");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>basketID</column-name><column-value><![CDATA[");
		sb.append(getBasketID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basketJSON</column-name><column-value><![CDATA[");
		sb.append(getBasketJSON());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queryJSON</column-name><column-value><![CDATA[");
		sb.append(getQueryJSON());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Basket.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Basket.class };
	private long _basketID;
	private long _originalBasketID;
	private boolean _setOriginalBasketID;
	private long _userID;
	private long _originalUserID;
	private boolean _setOriginalUserID;
	private String _name;
	private String _basketJSON;
	private String _queryJSON;
	private long _columnBitmask;
	private Basket _escapedModel;
}