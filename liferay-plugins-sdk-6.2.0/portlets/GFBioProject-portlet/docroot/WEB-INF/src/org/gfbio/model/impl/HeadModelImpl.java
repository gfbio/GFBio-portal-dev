/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.Head;
import org.gfbio.model.HeadModel;
import org.gfbio.model.HeadSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Head service. Represents a row in the &quot;gfbio_Head&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.HeadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HeadImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see HeadImpl
 * @see org.gfbio.model.Head
 * @see org.gfbio.model.HeadModel
 * @generated
 */
@JSON(strict = true)
public class HeadModelImpl extends BaseModelImpl<Head> implements HeadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a head model instance should use the {@link org.gfbio.model.Head} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Head";
	public static final Object[][] TABLE_COLUMNS = {
			{ "headID", Types.BIGINT },
			{ "table_name", Types.VARCHAR },
			{ "table_type", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Head (headID LONG not null primary key,table_name VARCHAR(75) null,table_type VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Head";
	public static final String ORDER_BY_JPQL = " ORDER BY head.table_name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Head.table_name ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Head"), false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Head"), false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Head"),
			true);
	public static long HEADID_COLUMN_BITMASK = 1L;
	public static long TABLE_NAME_COLUMN_BITMASK = 2L;
	public static long TABLE_TYPE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Head toModel(HeadSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Head model = new HeadImpl();

		model.setHeadID(soapModel.getHeadID());
		model.setTable_name(soapModel.getTable_name());
		model.setTable_type(soapModel.getTable_type());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Head> toModels(HeadSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Head> models = new ArrayList<Head>(soapModels.length);

		for (HeadSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Head"));

	public HeadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _headID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHeadID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _headID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Head.class;
	}

	@Override
	public String getModelClassName() {
		return Head.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("headID", getHeadID());
		attributes.put("table_name", getTable_name());
		attributes.put("table_type", getTable_type());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long headID = (Long)attributes.get("headID");

		if (headID != null) {
			setHeadID(headID);
		}

		String table_name = (String)attributes.get("table_name");

		if (table_name != null) {
			setTable_name(table_name);
		}

		String table_type = (String)attributes.get("table_type");

		if (table_type != null) {
			setTable_type(table_type);
		}
	}

	@JSON
	@Override
	public long getHeadID() {
		return _headID;
	}

	@Override
	public void setHeadID(long headID) {
		_columnBitmask |= HEADID_COLUMN_BITMASK;

		if (!_setOriginalHeadID) {
			_setOriginalHeadID = true;

			_originalHeadID = _headID;
		}

		_headID = headID;
	}

	public long getOriginalHeadID() {
		return _originalHeadID;
	}

	@JSON
	@Override
	public String getTable_name() {
		if (_table_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _table_name;
		}
	}

	@Override
	public void setTable_name(String table_name) {
		_columnBitmask = -1L;

		if (_originalTable_name == null) {
			_originalTable_name = _table_name;
		}

		_table_name = table_name;
	}

	public String getOriginalTable_name() {
		return GetterUtil.getString(_originalTable_name);
	}

	@JSON
	@Override
	public String getTable_type() {
		if (_table_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _table_type;
		}
	}

	@Override
	public void setTable_type(String table_type) {
		_columnBitmask |= TABLE_TYPE_COLUMN_BITMASK;

		if (_originalTable_type == null) {
			_originalTable_type = _table_type;
		}

		_table_type = table_type;
	}

	public String getOriginalTable_type() {
		return GetterUtil.getString(_originalTable_type);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Head.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Head toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Head)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HeadImpl headImpl = new HeadImpl();

		headImpl.setHeadID(getHeadID());
		headImpl.setTable_name(getTable_name());
		headImpl.setTable_type(getTable_type());

		headImpl.resetOriginalValues();

		return headImpl;
	}

	@Override
	public int compareTo(Head head) {
		int value = 0;

		value = getTable_name().compareTo(head.getTable_name());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Head)) {
			return false;
		}

		Head head = (Head)obj;

		long primaryKey = head.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HeadModelImpl headModelImpl = this;

		headModelImpl._originalHeadID = headModelImpl._headID;

		headModelImpl._setOriginalHeadID = false;

		headModelImpl._originalTable_name = headModelImpl._table_name;

		headModelImpl._originalTable_type = headModelImpl._table_type;

		headModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Head> toCacheModel() {
		HeadCacheModel headCacheModel = new HeadCacheModel();

		headCacheModel.headID = getHeadID();

		headCacheModel.table_name = getTable_name();

		String table_name = headCacheModel.table_name;

		if ((table_name != null) && (table_name.length() == 0)) {
			headCacheModel.table_name = null;
		}

		headCacheModel.table_type = getTable_type();

		String table_type = headCacheModel.table_type;

		if ((table_type != null) && (table_type.length() == 0)) {
			headCacheModel.table_type = null;
		}

		return headCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{headID=");
		sb.append(getHeadID());
		sb.append(", table_name=");
		sb.append(getTable_name());
		sb.append(", table_type=");
		sb.append(getTable_type());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Head");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>headID</column-name><column-value><![CDATA[");
		sb.append(getHeadID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>table_name</column-name><column-value><![CDATA[");
		sb.append(getTable_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>table_type</column-name><column-value><![CDATA[");
		sb.append(getTable_type());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Head.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Head.class };
	private long _headID;
	private long _originalHeadID;
	private boolean _setOriginalHeadID;
	private String _table_name;
	private String _originalTable_name;
	private String _table_type;
	private String _originalTable_type;
	private long _columnBitmask;
	private Head _escapedModel;
}