*********************************************
*** Software Requirements ***
********************************************
- Java SDK 8_101 or higher
- Liferay IDE 3.1.0. or higher (Eclipse-Mars Liferay IDE bundle)
	Get the Liferay IDE here, use the milestone (https://web.liferay.com/downloads/liferay-projects/liferay-ide)

For testing purposes (workspace) you have to initialize it with your own Liferay7 BundleVersion
--> open cmd in the workspace, execute "blade initBundle" 
(with it you´ll download the bundle, if not already in your user/.liferay/bundles folder and get it in contact with your workspace)
standard set password is test/test, depending on how you setup your liferay instance) 


-------------------------------------------------------------------------------------------------

**********************************************
*** Liferay 7 Theme-Generator Introduction ***
**********************************************

- based on the tutorial on https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/introduction-to-themes
- theme generator for theme automation process
- (ant and other programs could be used aswell)
- using gulp for build and deploy

STARTING POINT:	https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themes-generator

**********************************************
*** Node JS and the NPM, Yeoman and Gulp ***
**********************************************

- node js necessary for working with the theme generator
- https://nodejs.org/en/
- command line: "node -v" should respond v4.2.2 or newer

Setup npm (node package manager) runtime environment:
	(1) create .npmn file in users home directory
	- In the .npmrc file, specify a prefix property like this one: prefix=/Users/[username]/.npm-packages
	- prefix value is based on your users home directory --> location you specify is where global npm packages will be installed
	- set Node.js NPM_PACKAGES and NODE_PATH system environment variables with values like these based on the prefix value you just specified.
		NPM_PACKAGES=/Users/[username]/.npm-packages (same as prefix value)
		NODE_PATH=${NODE_PATH}:${NPM_PACKAGES}/lib/node_modules
	
	(2) npm installation also installs YEOMAN and GULP (creation and deploy) executables to ${NPM_PACKAGES}/bin on UNIX and to %NPM_PACKAGES% on Windows
		--> add directory to your system path
		--> example on UNIX:	PATH=${PATH}:${NPM_PACKAGES}/bin 
		
	(3) install YEOMAN and GULP globally  via command line:	npm install -g yo gulp
	
************************************************
*** Theme-Generator ***
************************************************

- command line:	npm install -g generator-liferay-theme

For Windows User - Sass required:
	- Sass from node-sass (requires Visual Studio) or Sass from Ruby
	(1) Sass from node-sass:
		- requires node-gyp (requires Python and Visual Studio)
		- node-gyp install instruction (we didn't try out):	https://github.com/nodejs/node-gyp#installation
		
	(2) Sass from Ruby and Compass:
		- install Ruby via Ruby-installer:	http://rubyinstaller.org/
		- install compass via command line:	gem install sass compass
			--> there could be trouble,you could need a .pem file since gem-hosts changed and certificates and permissions also (we had a cacert.pem)
			--> they´re about to fix this problem so maybe not necessary and already working, else google is your best friend
	


********************************************
*** Your first Theme via Theme-Generator ***
********************************************

- https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themes-generator
- open command line in directory in which you want to create the theme (new folder will be created)
- command line:	yo liferay-theme
- enter in order:	name, theme-id (or enter for default), version of liferay (to select)

----------------------------------------------------------------------------------------------------------------

**************************
*** JPM4J installation ***
**************************
- download jpm4j (https://github.com/jpm4j/jpm4j.installers/blob/master/dist/biz.aQute.jpm.run.jar)
- copy it to the directory where you want to have it
- open a command line in this folder (shift+rightclick --> open command at this location)
- type in the following command:

java -jar biz.aQute.jpm.run.jar -g init

- add C:/JPM4J/bin to your path
- check if jpm is working: open a command line and type "jpm use", is expected to show the JPM4J home and bin

- run "jpm install bnd"

***************************
*** Blade Client ***
***************************
- install the BLade client with the following command: 

jpm install com.liferay.blade.cli

- (if it does not work, check out git for possible updates https://github.com/liferay/liferay-blade-cli/)

- check if blade has been installed

	- cmd: blade version


Note: For Windows users, the blade update command does not work. This is because Windows cannot update a file that is currently in use. To bypass this issue, you can use JPM to update your version of Blade CLI:

jpm install -f com.liferay.blade.cli


NOTE: Blade is your all in one - cmd Tool (in comparison to LiferayIDE in Eclipse).. startup server.. deploy etc pp

--> https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/blade-cli


******************************
*** Creating a Liferay Workspace with Blade CLI ***
******************************
Quote "This is the official way to create Liferay 7.0 modules using Gradle. 
For those developers that still want to develop WAR-style plugins using the Plugins SDK, this way is also supported using a Liferay Workspace."

* a liferay workspace for all your custom projects 

open command line where you want to setup your liferay7 workspace (shift+rightclick --> open cmd here):
	- enter "blade init [Workspace Name]"
	- want to send it to co-worker etc?
		- cmd "./gradlew distBundle[Zip|Tar]" and get the compressed file
		- Your distribution file is available from the workspace’s /build directory

if you want to run your modules against a Liferay Test-Server modify
	- gradle.properties file


SETUP your Liferay Instance in Working Directory:

	- cmd:	gradlew initBundle
***************************************************************
*** Creating a Liferay Workspace in Eclipse // Working with it
**************************************************************

Therefore stick to 
https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/creating-a-liferay-workspace-with-liferay-ide

1 Switch View to Liferay Workspace View
2 in Project Explorer Create New - Liferay Workspace (Fill in Name, rather activate the Checkbox at download Bundle, else you´ll have to "blade initBundle" lateron in your workspace-cmd)
3 just working if you have the newest Liferay IDE and Java installed (Else Sourceforge throws ssl handshake errors.. sadly)




********************************************
*** Creating Theme Contributor with Liferay IDE
*********************************************


********************************************
*** Creating Theme Contributor with Blade CLI
*********************************************

 - https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/theme-contributor-template

command line where you want to create:
	- blade create -t theme-contributor [--contributorType contributorType] [-p packageName] projectName
	- e.g.:	blade create -t theme-contributor --contributorType my-contributor -p com.liferay.docs.theme.contributor my-theme-contributor


**********************************
*** Creating a new Portlet with Blade CLI
**********************************

We mostly use the MVC Portlet (Model View Controler)
*Liferay kind of implements an own version of this
Read more on https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/creating-an-mvc-portlet

Further on you got 2 options:
	1) Create via Command Line and blade (https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/using-the-mvc-portlet-template)
	2) Create via Eclipse - New Liferay Module (edit name, type and create)

If you created your first little Portlet, you should see in your Workspace under modules/YOURTESTPORTLET
It should have the following folder-structure:
	1 src/main/java
	2 src/main/resources
	3 JRE System Library
	4 Project and External Dependencies
	5 src
	6 bnd.bnd
	7 build.gradle

Easily said number 1 is for editing the .java file and everything that contains logic or controlling code and stating when to use which jsp of number 2.
Number 2 is for editing the look and feel  e.g. buttons, text, options.

Number 5 will lateron contain Number 1 and 2 if deployed to the server


After opening/importing the Workspace you have to deploy the Portlet to the Server if not already done.
(drag&drop it to the Server instance (should already run) or via rightclicking)

Finally implementing on your running instance:
	1 Server has to run already
	2 Portlet has to be deployed
	3 if youre signed in on the instance, implement new portlets via the "Add"-Navigation /Applications/Sample/YOUR PORTLET
		--> drag& drop it to the site where you want it to be

The myJspTestportlet ist just for showing the frontend-work of the jsp files. No other logic included, but could be done via ActionMethods.
Further Information in the Documentation or given when needed.

Links:	http://www.javasavvy.com/liferay-7-portlet-tutorial/ (interesting lil tutorial on working with different .jsp files / portlet)




	