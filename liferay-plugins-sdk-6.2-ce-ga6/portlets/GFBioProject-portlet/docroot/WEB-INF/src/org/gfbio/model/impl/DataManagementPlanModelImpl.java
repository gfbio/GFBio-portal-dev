/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.DataManagementPlan;
import org.gfbio.model.DataManagementPlanModel;
import org.gfbio.model.DataManagementPlanSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataManagementPlan service. Represents a row in the &quot;gfbio_DataManagementPlan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.DataManagementPlanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataManagementPlanImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see DataManagementPlanImpl
 * @see org.gfbio.model.DataManagementPlan
 * @see org.gfbio.model.DataManagementPlanModel
 * @generated
 */
@JSON(strict = true)
public class DataManagementPlanModelImpl extends BaseModelImpl<DataManagementPlan>
	implements DataManagementPlanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data management plan model instance should use the {@link org.gfbio.model.DataManagementPlan} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_DataManagementPlan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dmpid", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "userid", Types.BIGINT },
			{ "dmptinput", Types.VARCHAR },
			{ "ticketid", Types.BIGINT },
			{ "lastmodifieddate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_DataManagementPlan (dmpid LONG not null primary key,name VARCHAR(75) null,userid LONG,dmptinput VARCHAR(75) null,ticketid LONG,lastmodifieddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_DataManagementPlan";
	public static final String ORDER_BY_JPQL = " ORDER BY dataManagementPlan.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_DataManagementPlan.name ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.DataManagementPlan"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.DataManagementPlan"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.DataManagementPlan"),
			true);
	public static long DMPID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long NAME_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataManagementPlan toModel(DataManagementPlanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataManagementPlan model = new DataManagementPlanImpl();

		model.setDmpID(soapModel.getDmpID());
		model.setName(soapModel.getName());
		model.setUserID(soapModel.getUserID());
		model.setDmpTInput(soapModel.getDmpTInput());
		model.setTicketID(soapModel.getTicketID());
		model.setLastModifiedDate(soapModel.getLastModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataManagementPlan> toModels(
		DataManagementPlanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataManagementPlan> models = new ArrayList<DataManagementPlan>(soapModels.length);

		for (DataManagementPlanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.DataManagementPlan"));

	public DataManagementPlanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dmpID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDmpID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dmpID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataManagementPlan.class;
	}

	@Override
	public String getModelClassName() {
		return DataManagementPlan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dmpID", getDmpID());
		attributes.put("name", getName());
		attributes.put("userID", getUserID());
		attributes.put("dmpTInput", getDmpTInput());
		attributes.put("ticketID", getTicketID());
		attributes.put("lastModifiedDate", getLastModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dmpID = (Long)attributes.get("dmpID");

		if (dmpID != null) {
			setDmpID(dmpID);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		String dmpTInput = (String)attributes.get("dmpTInput");

		if (dmpTInput != null) {
			setDmpTInput(dmpTInput);
		}

		Long ticketID = (Long)attributes.get("ticketID");

		if (ticketID != null) {
			setTicketID(ticketID);
		}

		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}
	}

	@JSON
	@Override
	public long getDmpID() {
		return _dmpID;
	}

	@Override
	public void setDmpID(long dmpID) {
		_columnBitmask |= DMPID_COLUMN_BITMASK;

		if (!_setOriginalDmpID) {
			_setOriginalDmpID = true;

			_originalDmpID = _dmpID;
		}

		_dmpID = dmpID;
	}

	public long getOriginalDmpID() {
		return _originalDmpID;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserID) {
			_setOriginalUserID = true;

			_originalUserID = _userID;
		}

		_userID = userID;
	}

	public long getOriginalUserID() {
		return _originalUserID;
	}

	@JSON
	@Override
	public String getDmpTInput() {
		if (_dmpTInput == null) {
			return StringPool.BLANK;
		}
		else {
			return _dmpTInput;
		}
	}

	@Override
	public void setDmpTInput(String dmpTInput) {
		_dmpTInput = dmpTInput;
	}

	@JSON
	@Override
	public long getTicketID() {
		return _ticketID;
	}

	@Override
	public void setTicketID(long ticketID) {
		_ticketID = ticketID;
	}

	@JSON
	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_lastModifiedDate = lastModifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DataManagementPlan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataManagementPlan toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataManagementPlan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataManagementPlanImpl dataManagementPlanImpl = new DataManagementPlanImpl();

		dataManagementPlanImpl.setDmpID(getDmpID());
		dataManagementPlanImpl.setName(getName());
		dataManagementPlanImpl.setUserID(getUserID());
		dataManagementPlanImpl.setDmpTInput(getDmpTInput());
		dataManagementPlanImpl.setTicketID(getTicketID());
		dataManagementPlanImpl.setLastModifiedDate(getLastModifiedDate());

		dataManagementPlanImpl.resetOriginalValues();

		return dataManagementPlanImpl;
	}

	@Override
	public int compareTo(DataManagementPlan dataManagementPlan) {
		int value = 0;

		value = getName().compareTo(dataManagementPlan.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataManagementPlan)) {
			return false;
		}

		DataManagementPlan dataManagementPlan = (DataManagementPlan)obj;

		long primaryKey = dataManagementPlan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DataManagementPlanModelImpl dataManagementPlanModelImpl = this;

		dataManagementPlanModelImpl._originalDmpID = dataManagementPlanModelImpl._dmpID;

		dataManagementPlanModelImpl._setOriginalDmpID = false;

		dataManagementPlanModelImpl._originalUserID = dataManagementPlanModelImpl._userID;

		dataManagementPlanModelImpl._setOriginalUserID = false;

		dataManagementPlanModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataManagementPlan> toCacheModel() {
		DataManagementPlanCacheModel dataManagementPlanCacheModel = new DataManagementPlanCacheModel();

		dataManagementPlanCacheModel.dmpID = getDmpID();

		dataManagementPlanCacheModel.name = getName();

		String name = dataManagementPlanCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dataManagementPlanCacheModel.name = null;
		}

		dataManagementPlanCacheModel.userID = getUserID();

		dataManagementPlanCacheModel.dmpTInput = getDmpTInput();

		String dmpTInput = dataManagementPlanCacheModel.dmpTInput;

		if ((dmpTInput != null) && (dmpTInput.length() == 0)) {
			dataManagementPlanCacheModel.dmpTInput = null;
		}

		dataManagementPlanCacheModel.ticketID = getTicketID();

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			dataManagementPlanCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			dataManagementPlanCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		return dataManagementPlanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{dmpID=");
		sb.append(getDmpID());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", userID=");
		sb.append(getUserID());
		sb.append(", dmpTInput=");
		sb.append(getDmpTInput());
		sb.append(", ticketID=");
		sb.append(getTicketID());
		sb.append(", lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.DataManagementPlan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dmpID</column-name><column-value><![CDATA[");
		sb.append(getDmpID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dmpTInput</column-name><column-value><![CDATA[");
		sb.append(getDmpTInput());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketID</column-name><column-value><![CDATA[");
		sb.append(getTicketID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataManagementPlan.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataManagementPlan.class
		};
	private long _dmpID;
	private long _originalDmpID;
	private boolean _setOriginalDmpID;
	private String _name;
	private long _userID;
	private long _originalUserID;
	private boolean _setOriginalUserID;
	private String _dmpTInput;
	private long _ticketID;
	private Date _lastModifiedDate;
	private long _columnBitmask;
	private DataManagementPlan _escapedModel;
}