/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.PrimaryData;
import org.gfbio.model.PrimaryDataModel;
import org.gfbio.model.PrimaryDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PrimaryData service. Represents a row in the &quot;gfbio_PrimaryData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.PrimaryDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PrimaryDataImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see PrimaryDataImpl
 * @see org.gfbio.model.PrimaryData
 * @see org.gfbio.model.PrimaryDataModel
 * @generated
 */
@JSON(strict = true)
public class PrimaryDataModelImpl extends BaseModelImpl<PrimaryData>
	implements PrimaryDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a primary data model instance should use the {@link org.gfbio.model.PrimaryData} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_PrimaryData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "primarydataid", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "path", Types.VARCHAR },
			{ "lastmodifieddate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_PrimaryData (primarydataid LONG not null primary key,name VARCHAR(75) null,path VARCHAR(75) null,lastmodifieddate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_PrimaryData";
	public static final String ORDER_BY_JPQL = " ORDER BY primaryData.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_PrimaryData.name ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.PrimaryData"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.PrimaryData"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.PrimaryData"),
			true);
	public static long PRIMARYDATAID_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PrimaryData toModel(PrimaryDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PrimaryData model = new PrimaryDataImpl();

		model.setPrimaryDataID(soapModel.getPrimaryDataID());
		model.setName(soapModel.getName());
		model.setPath(soapModel.getPath());
		model.setLastModifiedDate(soapModel.getLastModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PrimaryData> toModels(PrimaryDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PrimaryData> models = new ArrayList<PrimaryData>(soapModels.length);

		for (PrimaryDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.PrimaryData"));

	public PrimaryDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _primaryDataID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPrimaryDataID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _primaryDataID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PrimaryData.class;
	}

	@Override
	public String getModelClassName() {
		return PrimaryData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("primaryDataID", getPrimaryDataID());
		attributes.put("name", getName());
		attributes.put("path", getPath());
		attributes.put("lastModifiedDate", getLastModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long primaryDataID = (Long)attributes.get("primaryDataID");

		if (primaryDataID != null) {
			setPrimaryDataID(primaryDataID);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}
	}

	@JSON
	@Override
	public long getPrimaryDataID() {
		return _primaryDataID;
	}

	@Override
	public void setPrimaryDataID(long primaryDataID) {
		_columnBitmask |= PRIMARYDATAID_COLUMN_BITMASK;

		if (!_setOriginalPrimaryDataID) {
			_setOriginalPrimaryDataID = true;

			_originalPrimaryDataID = _primaryDataID;
		}

		_primaryDataID = primaryDataID;
	}

	public long getOriginalPrimaryDataID() {
		return _originalPrimaryDataID;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@JSON
	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@JSON
	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_lastModifiedDate = lastModifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PrimaryData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PrimaryData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PrimaryData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PrimaryDataImpl primaryDataImpl = new PrimaryDataImpl();

		primaryDataImpl.setPrimaryDataID(getPrimaryDataID());
		primaryDataImpl.setName(getName());
		primaryDataImpl.setPath(getPath());
		primaryDataImpl.setLastModifiedDate(getLastModifiedDate());

		primaryDataImpl.resetOriginalValues();

		return primaryDataImpl;
	}

	@Override
	public int compareTo(PrimaryData primaryData) {
		int value = 0;

		value = getName().compareTo(primaryData.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PrimaryData)) {
			return false;
		}

		PrimaryData primaryData = (PrimaryData)obj;

		long primaryKey = primaryData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PrimaryDataModelImpl primaryDataModelImpl = this;

		primaryDataModelImpl._originalPrimaryDataID = primaryDataModelImpl._primaryDataID;

		primaryDataModelImpl._setOriginalPrimaryDataID = false;

		primaryDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PrimaryData> toCacheModel() {
		PrimaryDataCacheModel primaryDataCacheModel = new PrimaryDataCacheModel();

		primaryDataCacheModel.primaryDataID = getPrimaryDataID();

		primaryDataCacheModel.name = getName();

		String name = primaryDataCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			primaryDataCacheModel.name = null;
		}

		primaryDataCacheModel.path = getPath();

		String path = primaryDataCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			primaryDataCacheModel.path = null;
		}

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			primaryDataCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			primaryDataCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		return primaryDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{primaryDataID=");
		sb.append(getPrimaryDataID());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.PrimaryData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>primaryDataID</column-name><column-value><![CDATA[");
		sb.append(getPrimaryDataID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PrimaryData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PrimaryData.class
		};
	private long _primaryDataID;
	private long _originalPrimaryDataID;
	private boolean _setOriginalPrimaryDataID;
	private String _name;
	private String _path;
	private Date _lastModifiedDate;
	private long _columnBitmask;
	private PrimaryData _escapedModel;
}