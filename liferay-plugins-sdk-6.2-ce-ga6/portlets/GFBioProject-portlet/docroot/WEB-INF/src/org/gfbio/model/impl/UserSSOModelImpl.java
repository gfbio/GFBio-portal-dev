/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.UserSSO;
import org.gfbio.model.UserSSOModel;
import org.gfbio.model.UserSSOSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserSSO service. Represents a row in the &quot;gfbio_UserSSO&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.UserSSOModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserSSOImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see UserSSOImpl
 * @see org.gfbio.model.UserSSO
 * @see org.gfbio.model.UserSSOModel
 * @generated
 */
@JSON(strict = true)
public class UserSSOModelImpl extends BaseModelImpl<UserSSO>
	implements UserSSOModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user s s o model instance should use the {@link org.gfbio.model.UserSSO} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_UserSSO";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userID", Types.BIGINT },
			{ "token", Types.VARCHAR },
			{ "lastModifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_UserSSO (userID LONG not null primary key,token VARCHAR(75) null,lastModifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_UserSSO";
	public static final String ORDER_BY_JPQL = " ORDER BY userSSO.lastModifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_UserSSO.lastModifiedDate DESC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.UserSSO"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.UserSSO"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.UserSSO"),
			true);
	public static long LASTMODIFIEDDATE_COLUMN_BITMASK = 1L;
	public static long TOKEN_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserSSO toModel(UserSSOSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserSSO model = new UserSSOImpl();

		model.setUserID(soapModel.getUserID());
		model.setToken(soapModel.getToken());
		model.setLastModifiedDate(soapModel.getLastModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserSSO> toModels(UserSSOSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserSSO> models = new ArrayList<UserSSO>(soapModels.length);

		for (UserSSOSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.UserSSO"));

	public UserSSOModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserSSO.class;
	}

	@Override
	public String getModelClassName() {
		return UserSSO.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userID", getUserID());
		attributes.put("token", getToken());
		attributes.put("lastModifiedDate", getLastModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		String token = (String)attributes.get("token");

		if (token != null) {
			setToken(token);
		}

		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserID) {
			_setOriginalUserID = true;

			_originalUserID = _userID;
		}

		_userID = userID;
	}

	public long getOriginalUserID() {
		return _originalUserID;
	}

	@JSON
	@Override
	public String getToken() {
		if (_token == null) {
			return StringPool.BLANK;
		}
		else {
			return _token;
		}
	}

	@Override
	public void setToken(String token) {
		_columnBitmask |= TOKEN_COLUMN_BITMASK;

		if (_originalToken == null) {
			_originalToken = _token;
		}

		_token = token;
	}

	public String getOriginalToken() {
		return GetterUtil.getString(_originalToken);
	}

	@JSON
	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_columnBitmask = -1L;

		if (_originalLastModifiedDate == null) {
			_originalLastModifiedDate = _lastModifiedDate;
		}

		_lastModifiedDate = lastModifiedDate;
	}

	public Date getOriginalLastModifiedDate() {
		return _originalLastModifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserSSO.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserSSO toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserSSO)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserSSOImpl userSSOImpl = new UserSSOImpl();

		userSSOImpl.setUserID(getUserID());
		userSSOImpl.setToken(getToken());
		userSSOImpl.setLastModifiedDate(getLastModifiedDate());

		userSSOImpl.resetOriginalValues();

		return userSSOImpl;
	}

	@Override
	public int compareTo(UserSSO userSSO) {
		int value = 0;

		value = DateUtil.compareTo(getLastModifiedDate(),
				userSSO.getLastModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserSSO)) {
			return false;
		}

		UserSSO userSSO = (UserSSO)obj;

		long primaryKey = userSSO.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserSSOModelImpl userSSOModelImpl = this;

		userSSOModelImpl._originalUserID = userSSOModelImpl._userID;

		userSSOModelImpl._setOriginalUserID = false;

		userSSOModelImpl._originalToken = userSSOModelImpl._token;

		userSSOModelImpl._originalLastModifiedDate = userSSOModelImpl._lastModifiedDate;

		userSSOModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserSSO> toCacheModel() {
		UserSSOCacheModel userSSOCacheModel = new UserSSOCacheModel();

		userSSOCacheModel.userID = getUserID();

		userSSOCacheModel.token = getToken();

		String token = userSSOCacheModel.token;

		if ((token != null) && (token.length() == 0)) {
			userSSOCacheModel.token = null;
		}

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			userSSOCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			userSSOCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		return userSSOCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{userID=");
		sb.append(getUserID());
		sb.append(", token=");
		sb.append(getToken());
		sb.append(", lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.UserSSO");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>token</column-name><column-value><![CDATA[");
		sb.append(getToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserSSO.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserSSO.class
		};
	private long _userID;
	private long _originalUserID;
	private boolean _setOriginalUserID;
	private String _token;
	private String _originalToken;
	private Date _lastModifiedDate;
	private Date _originalLastModifiedDate;
	private long _columnBitmask;
	private UserSSO _escapedModel;
}