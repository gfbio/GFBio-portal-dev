1. Generate domain-key, account-key, domain-csr, and domain-crt from https://zerossl.com

2. Create PKCS 12 file using your private key (domain-key) and CA signed certificate of it using OpenSSL (https://www.openssl.org). 
	openssl pkcs12 -export -in [path to certificate] -inkey [path to private key] -certfile [path to certificate ] -out mykeystore.p12

3. Create JKS file using keytool command (JAVA/jre/bin/)
	keytool -importkeystore -srckeystore mykeystore.p12 -srcstoretype pkcs12 -destkeystore mykeystore.jks -deststoretype JKS

4. Setup an update script (the created cert will be expired in 90 days and it can't be renewed before 10 days of expiration.)
	4.1 Install Perl (Strawberry Perl -http://strawberryperl.com - portable version is recommended) in C:\Perl64 following this guide https://zerossl.com/installation.html
		cpanm Crypt::LE -f
	
	4.2 Create a renewal.bat file under this folder:
	
		C:\Perl64\portableshell C:\Perl64\perl\site\bin\le.pl --key [path to account key] --csr [path to csr] --csr-key [path to domain key] --crt [path to domain crt] --domains [domain name] --path "C:\Program Files\Apache2.X\htdocs\.well-known\acme-challenge" --generate-missing --unlink --renew 10 --live
	
	4.3 Create a windows task scheduler to run the script every 12 weeks (84 days).
	

5. Go to liferay/tomcat/conf folder, update server.xml file: 
	5.1 redirect http to https
			<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="443" URIEncoding="UTF-8" />
	
	5.2 specify the cert for https listener
	<Connector port="443" protocol="org.apache.coyote.http11.Http11Protocol" 
			URIEncoding="UTF-8" maxThreads="150" SSLEnabled="true" scheme="https" 
			secure="true" clientAuth="false" sslProtocol="TLS" 
			keystoreFile="path to mykeystore.jks" 
			keystorePass="changeit" keyAlias="1" keyPass="changeit"/>
6. Update web.xml to complete the redirect process.
	6.1 Insert below script at the end of file under </welcome-file-list>, before </web-app>
	<security-constraint>
     <web-resource-collection>
        <web-resource-name>Protected Context</web-resource-name>
          <url-pattern>/*</url-pattern>
      </web-resource-collection>
      <!-- auth-constraint goes here if you requre authentication -->
      <user-data-constraint>
         <transport-guarantee>CONFIDENTIAL</transport-guarantee>
      </user-data-constraint>
	</security-constraint>

7. Restart Tomcat and check if http is redirected to https. (don't forget to open the firewall for port 443)
	
8. Opensocial gadgets and Liferay issue on HTTPS  https://web.liferay.com/community/forums/-/message_boards/message/13602321

	8.1 The URL's Shindig uses when rendering gadgets are defined in liferay/tomcat-7.0.23/webapps/opensocial-portlet/WEB-INF/classes/containers/default/container.js
	In this file, there are some hard references to "http" URL's. I've changed these to "//" which will be replaced with the protocol (http / https) used. I haven't had time to test this fully, but if this does not work for you, substitute it with "https" instead.

	The entries that i've modified in the above file:
	"gadgets.jsUriTemplate" : "//%host%/opensocial-portlet/gadgets/js/%js%",
	"gadgets.osDataUri" : "//%host%/opensocial-portlet/rpc",
	"defaultShindigTestHost": "//%host%",

	In the same file, in the gadgets.features - opensocial JSON struct:
	"path" : "//%host%/opensocial-portlet/rpc",
	"invalidatePath" : "//%host%/opensocial-portlet/rpc",

	8.2 After these modifications, restart Liferay.

9. For the http server like Apache, add this to httpd.conf (don't forget to enable mod_ssl.so)

	Listen 443 https
	Listen 80

	NameVirtualHost *:80
	<VirtualHost *:80>
	  ServerName [domain name]
	  Redirect permanent / https://[domain name]/
	</VirtualHost>

	<VirtualHost _default_:443>  
	  ServerName [domain name]
	  SSLEngine on
	  SSLCertificateFile [path to domain crt]
	  SSLCertificateKeyFile [path to domain key]
	</VirtualHost>

10. In a Java application, if you call a web service via https, please download the ssl cert before open the URL connection.
	10.1 Run the InstallCert.java (https://github.com/gfbio/GFBio-portal-dev/blob/development/liferay-plugins-sdk-6.2GA4/docs/InstallCert.java) to download SSL cert from the server to your local (development) machine.
		The file jssecacerts will be created, locate the file.
	
	10.2 On the Java application, before conn.openConnection(), set the java trustStore as follows:   
		System.setProperty("javax.net.ssl.trustStore",
                		[fullpath of jssecacerts]);
        System.setProperty("javax.net.ssl.trustStorePassword", [trustStorePassword]);
