/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.gfbio.model.Project_User_PI;
import org.gfbio.model.Project_User_PIModel;
import org.gfbio.model.Project_User_PISoap;

import org.gfbio.service.persistence.Project_User_PIPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Project_User_PI service. Represents a row in the &quot;gfbio_Project_User_PI&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.Project_User_PIModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Project_User_PIImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see Project_User_PIImpl
 * @see org.gfbio.model.Project_User_PI
 * @see org.gfbio.model.Project_User_PIModel
 * @generated
 */
@JSON(strict = true)
public class Project_User_PIModelImpl extends BaseModelImpl<Project_User_PI>
	implements Project_User_PIModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project_ user_ p i model instance should use the {@link org.gfbio.model.Project_User_PI} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Project_User_PI";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectID", Types.BIGINT },
			{ "userID", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Project_User_PI (projectID LONG not null,userID LONG not null,startDate DATE null,endDate DATE null,primary key (projectID, userID))";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Project_User_PI";
	public static final String ORDER_BY_JPQL = " ORDER BY project_User_PI.id.projectID ASC, project_User_PI.id.userID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Project_User_PI.projectID ASC, gfbio_Project_User_PI.userID ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Project_User_PI"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Project_User_PI"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Project_User_PI"),
			true);
	public static long PROJECTID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Project_User_PI toModel(Project_User_PISoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Project_User_PI model = new Project_User_PIImpl();

		model.setProjectID(soapModel.getProjectID());
		model.setUserID(soapModel.getUserID());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Project_User_PI> toModels(
		Project_User_PISoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Project_User_PI> models = new ArrayList<Project_User_PI>(soapModels.length);

		for (Project_User_PISoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Project_User_PI"));

	public Project_User_PIModelImpl() {
	}

	@Override
	public Project_User_PIPK getPrimaryKey() {
		return new Project_User_PIPK(_projectID, _userID);
	}

	@Override
	public void setPrimaryKey(Project_User_PIPK primaryKey) {
		setProjectID(primaryKey.projectID);
		setUserID(primaryKey.userID);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Project_User_PIPK(_projectID, _userID);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Project_User_PIPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Project_User_PI.class;
	}

	@Override
	public String getModelClassName() {
		return Project_User_PI.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectID", getProjectID());
		attributes.put("userID", getUserID());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectID = (Long)attributes.get("projectID");

		if (projectID != null) {
			setProjectID(projectID);
		}

		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}
	}

	@JSON
	@Override
	public long getProjectID() {
		return _projectID;
	}

	@Override
	public void setProjectID(long projectID) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectID) {
			_setOriginalProjectID = true;

			_originalProjectID = _projectID;
		}

		_projectID = projectID;
	}

	public long getOriginalProjectID() {
		return _originalProjectID;
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserID) {
			_setOriginalUserID = true;

			_originalUserID = _userID;
		}

		_userID = userID;
	}

	public long getOriginalUserID() {
		return _originalUserID;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Project_User_PI toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Project_User_PI)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Project_User_PIImpl project_User_PIImpl = new Project_User_PIImpl();

		project_User_PIImpl.setProjectID(getProjectID());
		project_User_PIImpl.setUserID(getUserID());
		project_User_PIImpl.setStartDate(getStartDate());
		project_User_PIImpl.setEndDate(getEndDate());

		project_User_PIImpl.resetOriginalValues();

		return project_User_PIImpl;
	}

	@Override
	public int compareTo(Project_User_PI project_User_PI) {
		Project_User_PIPK primaryKey = project_User_PI.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Project_User_PI)) {
			return false;
		}

		Project_User_PI project_User_PI = (Project_User_PI)obj;

		Project_User_PIPK primaryKey = project_User_PI.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		Project_User_PIModelImpl project_User_PIModelImpl = this;

		project_User_PIModelImpl._originalProjectID = project_User_PIModelImpl._projectID;

		project_User_PIModelImpl._setOriginalProjectID = false;

		project_User_PIModelImpl._originalUserID = project_User_PIModelImpl._userID;

		project_User_PIModelImpl._setOriginalUserID = false;

		project_User_PIModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Project_User_PI> toCacheModel() {
		Project_User_PICacheModel project_User_PICacheModel = new Project_User_PICacheModel();

		project_User_PICacheModel.projectID = getProjectID();

		project_User_PICacheModel.userID = getUserID();

		Date startDate = getStartDate();

		if (startDate != null) {
			project_User_PICacheModel.startDate = startDate.getTime();
		}
		else {
			project_User_PICacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			project_User_PICacheModel.endDate = endDate.getTime();
		}
		else {
			project_User_PICacheModel.endDate = Long.MIN_VALUE;
		}

		return project_User_PICacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{projectID=");
		sb.append(getProjectID());
		sb.append(", userID=");
		sb.append(getUserID());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Project_User_PI");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectID</column-name><column-value><![CDATA[");
		sb.append(getProjectID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Project_User_PI.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Project_User_PI.class
		};
	private long _projectID;
	private long _originalProjectID;
	private boolean _setOriginalProjectID;
	private long _userID;
	private long _originalUserID;
	private boolean _setOriginalUserID;
	private Date _startDate;
	private Date _endDate;
	private long _columnBitmask;
	private Project_User_PI _escapedModel;
}