/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.gfbio.model.DataProvider_PersistentIdentifier;
import org.gfbio.model.DataProvider_PersistentIdentifierModel;
import org.gfbio.model.DataProvider_PersistentIdentifierSoap;

import org.gfbio.service.persistence.DataProvider_PersistentIdentifierPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataProvider_PersistentIdentifier service. Represents a row in the &quot;gfbio_DataProvider_PersistentIdentifier&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.DataProvider_PersistentIdentifierModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataProvider_PersistentIdentifierImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see DataProvider_PersistentIdentifierImpl
 * @see org.gfbio.model.DataProvider_PersistentIdentifier
 * @see org.gfbio.model.DataProvider_PersistentIdentifierModel
 * @generated
 */
@JSON(strict = true)
public class DataProvider_PersistentIdentifierModelImpl extends BaseModelImpl<DataProvider_PersistentIdentifier>
	implements DataProvider_PersistentIdentifierModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data provider_ persistent identifier model instance should use the {@link org.gfbio.model.DataProvider_PersistentIdentifier} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_DataProvider_PersistentIdentifier";
	public static final Object[][] TABLE_COLUMNS = {
			{ "gfbio_dataprovider", Types.BIGINT },
			{ "gfbio_persistentidentifier", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_DataProvider_PersistentIdentifier (gfbio_dataprovider LONG not null,gfbio_persistentidentifier LONG not null,primary key (gfbio_dataprovider, gfbio_persistentidentifier))";
	public static final String TABLE_SQL_DROP = "drop table gfbio_DataProvider_PersistentIdentifier";
	public static final String ORDER_BY_JPQL = " ORDER BY dataProvider_PersistentIdentifier.id.gfbioDataProvider ASC, dataProvider_PersistentIdentifier.id.gfbioPersistentIdentifier ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_DataProvider_PersistentIdentifier.gfbio_dataprovider ASC, gfbio_DataProvider_PersistentIdentifier.gfbio_persistentidentifier ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.DataProvider_PersistentIdentifier"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.DataProvider_PersistentIdentifier"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.DataProvider_PersistentIdentifier"),
			true);
	public static long GFBIODATAPROVIDER_COLUMN_BITMASK = 1L;
	public static long GFBIOPERSISTENTIDENTIFIER_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataProvider_PersistentIdentifier toModel(
		DataProvider_PersistentIdentifierSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataProvider_PersistentIdentifier model = new DataProvider_PersistentIdentifierImpl();

		model.setGfbioDataProvider(soapModel.getGfbioDataProvider());
		model.setGfbioPersistentIdentifier(soapModel.getGfbioPersistentIdentifier());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataProvider_PersistentIdentifier> toModels(
		DataProvider_PersistentIdentifierSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataProvider_PersistentIdentifier> models = new ArrayList<DataProvider_PersistentIdentifier>(soapModels.length);

		for (DataProvider_PersistentIdentifierSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.DataProvider_PersistentIdentifier"));

	public DataProvider_PersistentIdentifierModelImpl() {
	}

	@Override
	public DataProvider_PersistentIdentifierPK getPrimaryKey() {
		return new DataProvider_PersistentIdentifierPK(_gfbioDataProvider,
			_gfbioPersistentIdentifier);
	}

	@Override
	public void setPrimaryKey(DataProvider_PersistentIdentifierPK primaryKey) {
		setGfbioDataProvider(primaryKey.gfbioDataProvider);
		setGfbioPersistentIdentifier(primaryKey.gfbioPersistentIdentifier);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DataProvider_PersistentIdentifierPK(_gfbioDataProvider,
			_gfbioPersistentIdentifier);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DataProvider_PersistentIdentifierPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DataProvider_PersistentIdentifier.class;
	}

	@Override
	public String getModelClassName() {
		return DataProvider_PersistentIdentifier.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("gfbioDataProvider", getGfbioDataProvider());
		attributes.put("gfbioPersistentIdentifier",
			getGfbioPersistentIdentifier());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long gfbioDataProvider = (Long)attributes.get("gfbioDataProvider");

		if (gfbioDataProvider != null) {
			setGfbioDataProvider(gfbioDataProvider);
		}

		Long gfbioPersistentIdentifier = (Long)attributes.get(
				"gfbioPersistentIdentifier");

		if (gfbioPersistentIdentifier != null) {
			setGfbioPersistentIdentifier(gfbioPersistentIdentifier);
		}
	}

	@JSON
	@Override
	public long getGfbioDataProvider() {
		return _gfbioDataProvider;
	}

	@Override
	public void setGfbioDataProvider(long gfbioDataProvider) {
		_columnBitmask |= GFBIODATAPROVIDER_COLUMN_BITMASK;

		if (!_setOriginalGfbioDataProvider) {
			_setOriginalGfbioDataProvider = true;

			_originalGfbioDataProvider = _gfbioDataProvider;
		}

		_gfbioDataProvider = gfbioDataProvider;
	}

	public long getOriginalGfbioDataProvider() {
		return _originalGfbioDataProvider;
	}

	@JSON
	@Override
	public long getGfbioPersistentIdentifier() {
		return _gfbioPersistentIdentifier;
	}

	@Override
	public void setGfbioPersistentIdentifier(long gfbioPersistentIdentifier) {
		_columnBitmask |= GFBIOPERSISTENTIDENTIFIER_COLUMN_BITMASK;

		if (!_setOriginalGfbioPersistentIdentifier) {
			_setOriginalGfbioPersistentIdentifier = true;

			_originalGfbioPersistentIdentifier = _gfbioPersistentIdentifier;
		}

		_gfbioPersistentIdentifier = gfbioPersistentIdentifier;
	}

	public long getOriginalGfbioPersistentIdentifier() {
		return _originalGfbioPersistentIdentifier;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DataProvider_PersistentIdentifier toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DataProvider_PersistentIdentifier)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataProvider_PersistentIdentifierImpl dataProvider_PersistentIdentifierImpl =
			new DataProvider_PersistentIdentifierImpl();

		dataProvider_PersistentIdentifierImpl.setGfbioDataProvider(getGfbioDataProvider());
		dataProvider_PersistentIdentifierImpl.setGfbioPersistentIdentifier(getGfbioPersistentIdentifier());

		dataProvider_PersistentIdentifierImpl.resetOriginalValues();

		return dataProvider_PersistentIdentifierImpl;
	}

	@Override
	public int compareTo(
		DataProvider_PersistentIdentifier dataProvider_PersistentIdentifier) {
		DataProvider_PersistentIdentifierPK primaryKey = dataProvider_PersistentIdentifier.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DataProvider_PersistentIdentifier)) {
			return false;
		}

		DataProvider_PersistentIdentifier dataProvider_PersistentIdentifier = (DataProvider_PersistentIdentifier)obj;

		DataProvider_PersistentIdentifierPK primaryKey = dataProvider_PersistentIdentifier.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		DataProvider_PersistentIdentifierModelImpl dataProvider_PersistentIdentifierModelImpl =
			this;

		dataProvider_PersistentIdentifierModelImpl._originalGfbioDataProvider = dataProvider_PersistentIdentifierModelImpl._gfbioDataProvider;

		dataProvider_PersistentIdentifierModelImpl._setOriginalGfbioDataProvider = false;

		dataProvider_PersistentIdentifierModelImpl._originalGfbioPersistentIdentifier = dataProvider_PersistentIdentifierModelImpl._gfbioPersistentIdentifier;

		dataProvider_PersistentIdentifierModelImpl._setOriginalGfbioPersistentIdentifier = false;

		dataProvider_PersistentIdentifierModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DataProvider_PersistentIdentifier> toCacheModel() {
		DataProvider_PersistentIdentifierCacheModel dataProvider_PersistentIdentifierCacheModel =
			new DataProvider_PersistentIdentifierCacheModel();

		dataProvider_PersistentIdentifierCacheModel.gfbioDataProvider = getGfbioDataProvider();

		dataProvider_PersistentIdentifierCacheModel.gfbioPersistentIdentifier = getGfbioPersistentIdentifier();

		return dataProvider_PersistentIdentifierCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{gfbioDataProvider=");
		sb.append(getGfbioDataProvider());
		sb.append(", gfbioPersistentIdentifier=");
		sb.append(getGfbioPersistentIdentifier());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.DataProvider_PersistentIdentifier");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>gfbioDataProvider</column-name><column-value><![CDATA[");
		sb.append(getGfbioDataProvider());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gfbioPersistentIdentifier</column-name><column-value><![CDATA[");
		sb.append(getGfbioPersistentIdentifier());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DataProvider_PersistentIdentifier.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DataProvider_PersistentIdentifier.class
		};
	private long _gfbioDataProvider;
	private long _originalGfbioDataProvider;
	private boolean _setOriginalGfbioDataProvider;
	private long _gfbioPersistentIdentifier;
	private long _originalGfbioPersistentIdentifier;
	private boolean _setOriginalGfbioPersistentIdentifier;
	private long _columnBitmask;
	private DataProvider_PersistentIdentifier _escapedModel;
}