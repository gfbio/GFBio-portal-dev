/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import org.gfbio.model.Funding_PersonProject;
import org.gfbio.model.Funding_PersonProjectModel;
import org.gfbio.model.Funding_PersonProjectSoap;

import org.gfbio.service.persistence.Funding_PersonProjectPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Funding_PersonProject service. Represents a row in the &quot;gfbio_Funding_PersonProject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.Funding_PersonProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Funding_PersonProjectImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see Funding_PersonProjectImpl
 * @see org.gfbio.model.Funding_PersonProject
 * @see org.gfbio.model.Funding_PersonProjectModel
 * @generated
 */
@JSON(strict = true)
public class Funding_PersonProjectModelImpl extends BaseModelImpl<Funding_PersonProject>
	implements Funding_PersonProjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a funding_ person project model instance should use the {@link org.gfbio.model.Funding_PersonProject} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Funding_PersonProject";
	public static final Object[][] TABLE_COLUMNS = {
			{ "projectID", Types.BIGINT },
			{ "fundingAgencyID", Types.BIGINT },
			{ "fundingProgramID", Types.BIGINT },
			{ "personID", Types.BIGINT },
			{ "personType", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Funding_PersonProject (projectID LONG not null,fundingAgencyID LONG not null,fundingProgramID LONG not null,personID LONG not null,personType VARCHAR(75) not null,primary key (projectID, fundingAgencyID, fundingProgramID, personID, personType))";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Funding_PersonProject";
	public static final String ORDER_BY_JPQL = " ORDER BY funding_PersonProject.id.projectID ASC, funding_PersonProject.id.fundingAgencyID ASC, funding_PersonProject.id.fundingProgramID ASC, funding_PersonProject.id.personID ASC, funding_PersonProject.id.personType ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Funding_PersonProject.projectID ASC, gfbio_Funding_PersonProject.fundingAgencyID ASC, gfbio_Funding_PersonProject.fundingProgramID ASC, gfbio_Funding_PersonProject.personID ASC, gfbio_Funding_PersonProject.personType ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Funding_PersonProject"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Funding_PersonProject"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Funding_PersonProject"),
			true);
	public static long FUNDINGAGENCYID_COLUMN_BITMASK = 1L;
	public static long PERSONID_COLUMN_BITMASK = 2L;
	public static long PERSONTYPE_COLUMN_BITMASK = 4L;
	public static long PROJECTID_COLUMN_BITMASK = 8L;
	public static long FUNDINGPROGRAMID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Funding_PersonProject toModel(
		Funding_PersonProjectSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Funding_PersonProject model = new Funding_PersonProjectImpl();

		model.setProjectID(soapModel.getProjectID());
		model.setFundingAgencyID(soapModel.getFundingAgencyID());
		model.setFundingProgramID(soapModel.getFundingProgramID());
		model.setPersonID(soapModel.getPersonID());
		model.setPersonType(soapModel.getPersonType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Funding_PersonProject> toModels(
		Funding_PersonProjectSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Funding_PersonProject> models = new ArrayList<Funding_PersonProject>(soapModels.length);

		for (Funding_PersonProjectSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Funding_PersonProject"));

	public Funding_PersonProjectModelImpl() {
	}

	@Override
	public Funding_PersonProjectPK getPrimaryKey() {
		return new Funding_PersonProjectPK(_projectID, _fundingAgencyID,
			_fundingProgramID, _personID, _personType);
	}

	@Override
	public void setPrimaryKey(Funding_PersonProjectPK primaryKey) {
		setProjectID(primaryKey.projectID);
		setFundingAgencyID(primaryKey.fundingAgencyID);
		setFundingProgramID(primaryKey.fundingProgramID);
		setPersonID(primaryKey.personID);
		setPersonType(primaryKey.personType);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Funding_PersonProjectPK(_projectID, _fundingAgencyID,
			_fundingProgramID, _personID, _personType);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Funding_PersonProjectPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Funding_PersonProject.class;
	}

	@Override
	public String getModelClassName() {
		return Funding_PersonProject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("projectID", getProjectID());
		attributes.put("fundingAgencyID", getFundingAgencyID());
		attributes.put("fundingProgramID", getFundingProgramID());
		attributes.put("personID", getPersonID());
		attributes.put("personType", getPersonType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long projectID = (Long)attributes.get("projectID");

		if (projectID != null) {
			setProjectID(projectID);
		}

		Long fundingAgencyID = (Long)attributes.get("fundingAgencyID");

		if (fundingAgencyID != null) {
			setFundingAgencyID(fundingAgencyID);
		}

		Long fundingProgramID = (Long)attributes.get("fundingProgramID");

		if (fundingProgramID != null) {
			setFundingProgramID(fundingProgramID);
		}

		Long personID = (Long)attributes.get("personID");

		if (personID != null) {
			setPersonID(personID);
		}

		String personType = (String)attributes.get("personType");

		if (personType != null) {
			setPersonType(personType);
		}
	}

	@JSON
	@Override
	public long getProjectID() {
		return _projectID;
	}

	@Override
	public void setProjectID(long projectID) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectID) {
			_setOriginalProjectID = true;

			_originalProjectID = _projectID;
		}

		_projectID = projectID;
	}

	public long getOriginalProjectID() {
		return _originalProjectID;
	}

	@JSON
	@Override
	public long getFundingAgencyID() {
		return _fundingAgencyID;
	}

	@Override
	public void setFundingAgencyID(long fundingAgencyID) {
		_columnBitmask |= FUNDINGAGENCYID_COLUMN_BITMASK;

		if (!_setOriginalFundingAgencyID) {
			_setOriginalFundingAgencyID = true;

			_originalFundingAgencyID = _fundingAgencyID;
		}

		_fundingAgencyID = fundingAgencyID;
	}

	public long getOriginalFundingAgencyID() {
		return _originalFundingAgencyID;
	}

	@JSON
	@Override
	public long getFundingProgramID() {
		return _fundingProgramID;
	}

	@Override
	public void setFundingProgramID(long fundingProgramID) {
		_fundingProgramID = fundingProgramID;
	}

	@JSON
	@Override
	public long getPersonID() {
		return _personID;
	}

	@Override
	public void setPersonID(long personID) {
		_columnBitmask |= PERSONID_COLUMN_BITMASK;

		if (!_setOriginalPersonID) {
			_setOriginalPersonID = true;

			_originalPersonID = _personID;
		}

		_personID = personID;
	}

	public long getOriginalPersonID() {
		return _originalPersonID;
	}

	@JSON
	@Override
	public String getPersonType() {
		if (_personType == null) {
			return StringPool.BLANK;
		}
		else {
			return _personType;
		}
	}

	@Override
	public void setPersonType(String personType) {
		_columnBitmask |= PERSONTYPE_COLUMN_BITMASK;

		if (_originalPersonType == null) {
			_originalPersonType = _personType;
		}

		_personType = personType;
	}

	public String getOriginalPersonType() {
		return GetterUtil.getString(_originalPersonType);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Funding_PersonProject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Funding_PersonProject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Funding_PersonProjectImpl funding_PersonProjectImpl = new Funding_PersonProjectImpl();

		funding_PersonProjectImpl.setProjectID(getProjectID());
		funding_PersonProjectImpl.setFundingAgencyID(getFundingAgencyID());
		funding_PersonProjectImpl.setFundingProgramID(getFundingProgramID());
		funding_PersonProjectImpl.setPersonID(getPersonID());
		funding_PersonProjectImpl.setPersonType(getPersonType());

		funding_PersonProjectImpl.resetOriginalValues();

		return funding_PersonProjectImpl;
	}

	@Override
	public int compareTo(Funding_PersonProject funding_PersonProject) {
		Funding_PersonProjectPK primaryKey = funding_PersonProject.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Funding_PersonProject)) {
			return false;
		}

		Funding_PersonProject funding_PersonProject = (Funding_PersonProject)obj;

		Funding_PersonProjectPK primaryKey = funding_PersonProject.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		Funding_PersonProjectModelImpl funding_PersonProjectModelImpl = this;

		funding_PersonProjectModelImpl._originalProjectID = funding_PersonProjectModelImpl._projectID;

		funding_PersonProjectModelImpl._setOriginalProjectID = false;

		funding_PersonProjectModelImpl._originalFundingAgencyID = funding_PersonProjectModelImpl._fundingAgencyID;

		funding_PersonProjectModelImpl._setOriginalFundingAgencyID = false;

		funding_PersonProjectModelImpl._originalPersonID = funding_PersonProjectModelImpl._personID;

		funding_PersonProjectModelImpl._setOriginalPersonID = false;

		funding_PersonProjectModelImpl._originalPersonType = funding_PersonProjectModelImpl._personType;

		funding_PersonProjectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Funding_PersonProject> toCacheModel() {
		Funding_PersonProjectCacheModel funding_PersonProjectCacheModel = new Funding_PersonProjectCacheModel();

		funding_PersonProjectCacheModel.projectID = getProjectID();

		funding_PersonProjectCacheModel.fundingAgencyID = getFundingAgencyID();

		funding_PersonProjectCacheModel.fundingProgramID = getFundingProgramID();

		funding_PersonProjectCacheModel.personID = getPersonID();

		funding_PersonProjectCacheModel.personType = getPersonType();

		String personType = funding_PersonProjectCacheModel.personType;

		if ((personType != null) && (personType.length() == 0)) {
			funding_PersonProjectCacheModel.personType = null;
		}

		return funding_PersonProjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{projectID=");
		sb.append(getProjectID());
		sb.append(", fundingAgencyID=");
		sb.append(getFundingAgencyID());
		sb.append(", fundingProgramID=");
		sb.append(getFundingProgramID());
		sb.append(", personID=");
		sb.append(getPersonID());
		sb.append(", personType=");
		sb.append(getPersonType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Funding_PersonProject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>projectID</column-name><column-value><![CDATA[");
		sb.append(getProjectID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundingAgencyID</column-name><column-value><![CDATA[");
		sb.append(getFundingAgencyID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundingProgramID</column-name><column-value><![CDATA[");
		sb.append(getFundingProgramID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personID</column-name><column-value><![CDATA[");
		sb.append(getPersonID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personType</column-name><column-value><![CDATA[");
		sb.append(getPersonType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Funding_PersonProject.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Funding_PersonProject.class
		};
	private long _projectID;
	private long _originalProjectID;
	private boolean _setOriginalProjectID;
	private long _fundingAgencyID;
	private long _originalFundingAgencyID;
	private boolean _setOriginalFundingAgencyID;
	private long _fundingProgramID;
	private long _personID;
	private long _originalPersonID;
	private boolean _setOriginalPersonID;
	private String _personType;
	private String _originalPersonType;
	private long _columnBitmask;
	private Funding_PersonProject _escapedModel;
}