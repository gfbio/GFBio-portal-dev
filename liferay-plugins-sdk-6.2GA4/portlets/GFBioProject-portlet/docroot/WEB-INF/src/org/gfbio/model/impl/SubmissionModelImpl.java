/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.Submission;
import org.gfbio.model.SubmissionModel;
import org.gfbio.model.SubmissionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Submission service. Represents a row in the &quot;gfbio_Submission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.SubmissionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubmissionImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see SubmissionImpl
 * @see org.gfbio.model.Submission
 * @see org.gfbio.model.SubmissionModel
 * @generated
 */
@JSON(strict = true)
public class SubmissionModelImpl extends BaseModelImpl<Submission>
	implements SubmissionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a submission model instance should use the {@link org.gfbio.model.Submission} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Submission";
	public static final Object[][] TABLE_COLUMNS = {
			{ "submissionID", Types.BIGINT },
			{ "researchObjectID", Types.BIGINT },
			{ "researchObjectVersion", Types.BIGINT },
			{ "archive", Types.VARCHAR },
			{ "brokerSubmissionID", Types.VARCHAR },
			{ "archive_pid", Types.VARCHAR },
			{ "archive_pid_type", Types.BIGINT },
			{ "last_changed", Types.TIMESTAMP },
			{ "userID", Types.BIGINT },
			{ "is_public", Types.BOOLEAN },
			{ "public_after", Types.TIMESTAMP },
			{ "status", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Submission (submissionID LONG not null primary key,researchObjectID LONG,researchObjectVersion LONG,archive VARCHAR(75) null,brokerSubmissionID VARCHAR(75) null,archive_pid VARCHAR(75) null,archive_pid_type LONG,last_changed DATE null,userID LONG,is_public BOOLEAN,public_after DATE null,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Submission";
	public static final String ORDER_BY_JPQL = " ORDER BY submission.researchObjectID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Submission.researchObjectID ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Submission"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Submission"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Submission"),
			true);
	public static long ARCHIVE_COLUMN_BITMASK = 1L;
	public static long ARCHIVEPID_COLUMN_BITMASK = 2L;
	public static long ARCHIVEPIDTYPE_COLUMN_BITMASK = 4L;
	public static long BROKERSUBMISSIONID_COLUMN_BITMASK = 8L;
	public static long ISPUBLIC_COLUMN_BITMASK = 16L;
	public static long LASTCHANGED_COLUMN_BITMASK = 32L;
	public static long RESEARCHOBJECTID_COLUMN_BITMASK = 64L;
	public static long RESEARCHOBJECTVERSION_COLUMN_BITMASK = 128L;
	public static long STATUS_COLUMN_BITMASK = 256L;
	public static long USERID_COLUMN_BITMASK = 512L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Submission toModel(SubmissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Submission model = new SubmissionImpl();

		model.setSubmissionID(soapModel.getSubmissionID());
		model.setResearchObjectID(soapModel.getResearchObjectID());
		model.setResearchObjectVersion(soapModel.getResearchObjectVersion());
		model.setArchive(soapModel.getArchive());
		model.setBrokerSubmissionID(soapModel.getBrokerSubmissionID());
		model.setArchivePID(soapModel.getArchivePID());
		model.setArchivePIDType(soapModel.getArchivePIDType());
		model.setLastChanged(soapModel.getLastChanged());
		model.setUserID(soapModel.getUserID());
		model.setIsPublic(soapModel.getIsPublic());
		model.setPublicAfter(soapModel.getPublicAfter());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Submission> toModels(SubmissionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Submission> models = new ArrayList<Submission>(soapModels.length);

		for (SubmissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Submission"));

	public SubmissionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _submissionID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubmissionID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _submissionID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Submission.class;
	}

	@Override
	public String getModelClassName() {
		return Submission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("submissionID", getSubmissionID());
		attributes.put("researchObjectID", getResearchObjectID());
		attributes.put("researchObjectVersion", getResearchObjectVersion());
		attributes.put("archive", getArchive());
		attributes.put("brokerSubmissionID", getBrokerSubmissionID());
		attributes.put("archivePID", getArchivePID());
		attributes.put("archivePIDType", getArchivePIDType());
		attributes.put("lastChanged", getLastChanged());
		attributes.put("userID", getUserID());
		attributes.put("isPublic", getIsPublic());
		attributes.put("publicAfter", getPublicAfter());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long submissionID = (Long)attributes.get("submissionID");

		if (submissionID != null) {
			setSubmissionID(submissionID);
		}

		Long researchObjectID = (Long)attributes.get("researchObjectID");

		if (researchObjectID != null) {
			setResearchObjectID(researchObjectID);
		}

		Long researchObjectVersion = (Long)attributes.get(
				"researchObjectVersion");

		if (researchObjectVersion != null) {
			setResearchObjectVersion(researchObjectVersion);
		}

		String archive = (String)attributes.get("archive");

		if (archive != null) {
			setArchive(archive);
		}

		String brokerSubmissionID = (String)attributes.get("brokerSubmissionID");

		if (brokerSubmissionID != null) {
			setBrokerSubmissionID(brokerSubmissionID);
		}

		String archivePID = (String)attributes.get("archivePID");

		if (archivePID != null) {
			setArchivePID(archivePID);
		}

		Long archivePIDType = (Long)attributes.get("archivePIDType");

		if (archivePIDType != null) {
			setArchivePIDType(archivePIDType);
		}

		Date lastChanged = (Date)attributes.get("lastChanged");

		if (lastChanged != null) {
			setLastChanged(lastChanged);
		}

		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		Boolean isPublic = (Boolean)attributes.get("isPublic");

		if (isPublic != null) {
			setIsPublic(isPublic);
		}

		Date publicAfter = (Date)attributes.get("publicAfter");

		if (publicAfter != null) {
			setPublicAfter(publicAfter);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getSubmissionID() {
		return _submissionID;
	}

	@Override
	public void setSubmissionID(long submissionID) {
		_submissionID = submissionID;
	}

	@JSON
	@Override
	public long getResearchObjectID() {
		return _researchObjectID;
	}

	@Override
	public void setResearchObjectID(long researchObjectID) {
		_columnBitmask = -1L;

		if (!_setOriginalResearchObjectID) {
			_setOriginalResearchObjectID = true;

			_originalResearchObjectID = _researchObjectID;
		}

		_researchObjectID = researchObjectID;
	}

	public long getOriginalResearchObjectID() {
		return _originalResearchObjectID;
	}

	@JSON
	@Override
	public long getResearchObjectVersion() {
		return _researchObjectVersion;
	}

	@Override
	public void setResearchObjectVersion(long researchObjectVersion) {
		_columnBitmask |= RESEARCHOBJECTVERSION_COLUMN_BITMASK;

		if (!_setOriginalResearchObjectVersion) {
			_setOriginalResearchObjectVersion = true;

			_originalResearchObjectVersion = _researchObjectVersion;
		}

		_researchObjectVersion = researchObjectVersion;
	}

	public long getOriginalResearchObjectVersion() {
		return _originalResearchObjectVersion;
	}

	@JSON
	@Override
	public String getArchive() {
		if (_archive == null) {
			return StringPool.BLANK;
		}
		else {
			return _archive;
		}
	}

	@Override
	public void setArchive(String archive) {
		_columnBitmask |= ARCHIVE_COLUMN_BITMASK;

		if (_originalArchive == null) {
			_originalArchive = _archive;
		}

		_archive = archive;
	}

	public String getOriginalArchive() {
		return GetterUtil.getString(_originalArchive);
	}

	@JSON
	@Override
	public String getBrokerSubmissionID() {
		if (_brokerSubmissionID == null) {
			return StringPool.BLANK;
		}
		else {
			return _brokerSubmissionID;
		}
	}

	@Override
	public void setBrokerSubmissionID(String brokerSubmissionID) {
		_columnBitmask |= BROKERSUBMISSIONID_COLUMN_BITMASK;

		if (_originalBrokerSubmissionID == null) {
			_originalBrokerSubmissionID = _brokerSubmissionID;
		}

		_brokerSubmissionID = brokerSubmissionID;
	}

	public String getOriginalBrokerSubmissionID() {
		return GetterUtil.getString(_originalBrokerSubmissionID);
	}

	@JSON
	@Override
	public String getArchivePID() {
		if (_archivePID == null) {
			return StringPool.BLANK;
		}
		else {
			return _archivePID;
		}
	}

	@Override
	public void setArchivePID(String archivePID) {
		_columnBitmask |= ARCHIVEPID_COLUMN_BITMASK;

		if (_originalArchivePID == null) {
			_originalArchivePID = _archivePID;
		}

		_archivePID = archivePID;
	}

	public String getOriginalArchivePID() {
		return GetterUtil.getString(_originalArchivePID);
	}

	@JSON
	@Override
	public long getArchivePIDType() {
		return _archivePIDType;
	}

	@Override
	public void setArchivePIDType(long archivePIDType) {
		_columnBitmask |= ARCHIVEPIDTYPE_COLUMN_BITMASK;

		if (!_setOriginalArchivePIDType) {
			_setOriginalArchivePIDType = true;

			_originalArchivePIDType = _archivePIDType;
		}

		_archivePIDType = archivePIDType;
	}

	public long getOriginalArchivePIDType() {
		return _originalArchivePIDType;
	}

	@JSON
	@Override
	public Date getLastChanged() {
		return _lastChanged;
	}

	@Override
	public void setLastChanged(Date lastChanged) {
		_columnBitmask |= LASTCHANGED_COLUMN_BITMASK;

		if (_originalLastChanged == null) {
			_originalLastChanged = _lastChanged;
		}

		_lastChanged = lastChanged;
	}

	public Date getOriginalLastChanged() {
		return _originalLastChanged;
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserID) {
			_setOriginalUserID = true;

			_originalUserID = _userID;
		}

		_userID = userID;
	}

	public long getOriginalUserID() {
		return _originalUserID;
	}

	@JSON
	@Override
	public boolean getIsPublic() {
		return _isPublic;
	}

	@Override
	public boolean isIsPublic() {
		return _isPublic;
	}

	@Override
	public void setIsPublic(boolean isPublic) {
		_columnBitmask |= ISPUBLIC_COLUMN_BITMASK;

		if (!_setOriginalIsPublic) {
			_setOriginalIsPublic = true;

			_originalIsPublic = _isPublic;
		}

		_isPublic = isPublic;
	}

	public boolean getOriginalIsPublic() {
		return _originalIsPublic;
	}

	@JSON
	@Override
	public Date getPublicAfter() {
		return _publicAfter;
	}

	@Override
	public void setPublicAfter(Date publicAfter) {
		_publicAfter = publicAfter;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Submission.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Submission toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Submission)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubmissionImpl submissionImpl = new SubmissionImpl();

		submissionImpl.setSubmissionID(getSubmissionID());
		submissionImpl.setResearchObjectID(getResearchObjectID());
		submissionImpl.setResearchObjectVersion(getResearchObjectVersion());
		submissionImpl.setArchive(getArchive());
		submissionImpl.setBrokerSubmissionID(getBrokerSubmissionID());
		submissionImpl.setArchivePID(getArchivePID());
		submissionImpl.setArchivePIDType(getArchivePIDType());
		submissionImpl.setLastChanged(getLastChanged());
		submissionImpl.setUserID(getUserID());
		submissionImpl.setIsPublic(getIsPublic());
		submissionImpl.setPublicAfter(getPublicAfter());
		submissionImpl.setStatus(getStatus());

		submissionImpl.resetOriginalValues();

		return submissionImpl;
	}

	@Override
	public int compareTo(Submission submission) {
		int value = 0;

		if (getResearchObjectID() < submission.getResearchObjectID()) {
			value = -1;
		}
		else if (getResearchObjectID() > submission.getResearchObjectID()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Submission)) {
			return false;
		}

		Submission submission = (Submission)obj;

		long primaryKey = submission.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SubmissionModelImpl submissionModelImpl = this;

		submissionModelImpl._originalResearchObjectID = submissionModelImpl._researchObjectID;

		submissionModelImpl._setOriginalResearchObjectID = false;

		submissionModelImpl._originalResearchObjectVersion = submissionModelImpl._researchObjectVersion;

		submissionModelImpl._setOriginalResearchObjectVersion = false;

		submissionModelImpl._originalArchive = submissionModelImpl._archive;

		submissionModelImpl._originalBrokerSubmissionID = submissionModelImpl._brokerSubmissionID;

		submissionModelImpl._originalArchivePID = submissionModelImpl._archivePID;

		submissionModelImpl._originalArchivePIDType = submissionModelImpl._archivePIDType;

		submissionModelImpl._setOriginalArchivePIDType = false;

		submissionModelImpl._originalLastChanged = submissionModelImpl._lastChanged;

		submissionModelImpl._originalUserID = submissionModelImpl._userID;

		submissionModelImpl._setOriginalUserID = false;

		submissionModelImpl._originalIsPublic = submissionModelImpl._isPublic;

		submissionModelImpl._setOriginalIsPublic = false;

		submissionModelImpl._originalStatus = submissionModelImpl._status;

		submissionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Submission> toCacheModel() {
		SubmissionCacheModel submissionCacheModel = new SubmissionCacheModel();

		submissionCacheModel.submissionID = getSubmissionID();

		submissionCacheModel.researchObjectID = getResearchObjectID();

		submissionCacheModel.researchObjectVersion = getResearchObjectVersion();

		submissionCacheModel.archive = getArchive();

		String archive = submissionCacheModel.archive;

		if ((archive != null) && (archive.length() == 0)) {
			submissionCacheModel.archive = null;
		}

		submissionCacheModel.brokerSubmissionID = getBrokerSubmissionID();

		String brokerSubmissionID = submissionCacheModel.brokerSubmissionID;

		if ((brokerSubmissionID != null) && (brokerSubmissionID.length() == 0)) {
			submissionCacheModel.brokerSubmissionID = null;
		}

		submissionCacheModel.archivePID = getArchivePID();

		String archivePID = submissionCacheModel.archivePID;

		if ((archivePID != null) && (archivePID.length() == 0)) {
			submissionCacheModel.archivePID = null;
		}

		submissionCacheModel.archivePIDType = getArchivePIDType();

		Date lastChanged = getLastChanged();

		if (lastChanged != null) {
			submissionCacheModel.lastChanged = lastChanged.getTime();
		}
		else {
			submissionCacheModel.lastChanged = Long.MIN_VALUE;
		}

		submissionCacheModel.userID = getUserID();

		submissionCacheModel.isPublic = getIsPublic();

		Date publicAfter = getPublicAfter();

		if (publicAfter != null) {
			submissionCacheModel.publicAfter = publicAfter.getTime();
		}
		else {
			submissionCacheModel.publicAfter = Long.MIN_VALUE;
		}

		submissionCacheModel.status = getStatus();

		String status = submissionCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			submissionCacheModel.status = null;
		}

		return submissionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{submissionID=");
		sb.append(getSubmissionID());
		sb.append(", researchObjectID=");
		sb.append(getResearchObjectID());
		sb.append(", researchObjectVersion=");
		sb.append(getResearchObjectVersion());
		sb.append(", archive=");
		sb.append(getArchive());
		sb.append(", brokerSubmissionID=");
		sb.append(getBrokerSubmissionID());
		sb.append(", archivePID=");
		sb.append(getArchivePID());
		sb.append(", archivePIDType=");
		sb.append(getArchivePIDType());
		sb.append(", lastChanged=");
		sb.append(getLastChanged());
		sb.append(", userID=");
		sb.append(getUserID());
		sb.append(", isPublic=");
		sb.append(getIsPublic());
		sb.append(", publicAfter=");
		sb.append(getPublicAfter());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Submission");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>submissionID</column-name><column-value><![CDATA[");
		sb.append(getSubmissionID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>researchObjectID</column-name><column-value><![CDATA[");
		sb.append(getResearchObjectID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>researchObjectVersion</column-name><column-value><![CDATA[");
		sb.append(getResearchObjectVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>archive</column-name><column-value><![CDATA[");
		sb.append(getArchive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brokerSubmissionID</column-name><column-value><![CDATA[");
		sb.append(getBrokerSubmissionID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>archivePID</column-name><column-value><![CDATA[");
		sb.append(getArchivePID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>archivePIDType</column-name><column-value><![CDATA[");
		sb.append(getArchivePIDType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastChanged</column-name><column-value><![CDATA[");
		sb.append(getLastChanged());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isPublic</column-name><column-value><![CDATA[");
		sb.append(getIsPublic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicAfter</column-name><column-value><![CDATA[");
		sb.append(getPublicAfter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Submission.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Submission.class
		};
	private long _submissionID;
	private long _researchObjectID;
	private long _originalResearchObjectID;
	private boolean _setOriginalResearchObjectID;
	private long _researchObjectVersion;
	private long _originalResearchObjectVersion;
	private boolean _setOriginalResearchObjectVersion;
	private String _archive;
	private String _originalArchive;
	private String _brokerSubmissionID;
	private String _originalBrokerSubmissionID;
	private String _archivePID;
	private String _originalArchivePID;
	private long _archivePIDType;
	private long _originalArchivePIDType;
	private boolean _setOriginalArchivePIDType;
	private Date _lastChanged;
	private Date _originalLastChanged;
	private long _userID;
	private long _originalUserID;
	private boolean _setOriginalUserID;
	private boolean _isPublic;
	private boolean _originalIsPublic;
	private boolean _setOriginalIsPublic;
	private Date _publicAfter;
	private String _status;
	private String _originalStatus;
	private long _columnBitmask;
	private Submission _escapedModel;
}