/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.Content;
import org.gfbio.model.ContentModel;
import org.gfbio.model.ContentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Content service. Represents a row in the &quot;gfbio_Content&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.ContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContentImpl}.
 * </p>
 *
 * @author Marcel Froemming
 * @see ContentImpl
 * @see org.gfbio.model.Content
 * @see org.gfbio.model.ContentModel
 * @generated
 */
@JSON(strict = true)
public class ContentModelImpl extends BaseModelImpl<Content>
	implements ContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a content model instance should use the {@link org.gfbio.model.Content} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_Content";
	public static final Object[][] TABLE_COLUMNS = {
			{ "contentID", Types.BIGINT },
			{ "headID", Types.BIGINT },
			{ "columnID", Types.BIGINT },
			{ "rowID", Types.BIGINT },
			{ "cellContent", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_Content (contentID LONG not null primary key,headID LONG,columnID LONG,rowID LONG,cellContent VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_Content";
	public static final String ORDER_BY_JPQL = " ORDER BY content.contentID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_Content.contentID ASC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.Content"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.Content"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.Content"),
			true);
	public static long CELLCONTENT_COLUMN_BITMASK = 1L;
	public static long COLUMNID_COLUMN_BITMASK = 2L;
	public static long CONTENTID_COLUMN_BITMASK = 4L;
	public static long HEADID_COLUMN_BITMASK = 8L;
	public static long ROWID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Content toModel(ContentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Content model = new ContentImpl();

		model.setContentID(soapModel.getContentID());
		model.setHeadID(soapModel.getHeadID());
		model.setColumnID(soapModel.getColumnID());
		model.setRowID(soapModel.getRowID());
		model.setCellContent(soapModel.getCellContent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Content> toModels(ContentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Content> models = new ArrayList<Content>(soapModels.length);

		for (ContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.Content"));

	public ContentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contentID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContentID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contentID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Content.class;
	}

	@Override
	public String getModelClassName() {
		return Content.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("contentID", getContentID());
		attributes.put("headID", getHeadID());
		attributes.put("columnID", getColumnID());
		attributes.put("rowID", getRowID());
		attributes.put("cellContent", getCellContent());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long contentID = (Long)attributes.get("contentID");

		if (contentID != null) {
			setContentID(contentID);
		}

		Long headID = (Long)attributes.get("headID");

		if (headID != null) {
			setHeadID(headID);
		}

		Long columnID = (Long)attributes.get("columnID");

		if (columnID != null) {
			setColumnID(columnID);
		}

		Long rowID = (Long)attributes.get("rowID");

		if (rowID != null) {
			setRowID(rowID);
		}

		String cellContent = (String)attributes.get("cellContent");

		if (cellContent != null) {
			setCellContent(cellContent);
		}
	}

	@JSON
	@Override
	public long getContentID() {
		return _contentID;
	}

	@Override
	public void setContentID(long contentID) {
		_columnBitmask = -1L;

		if (!_setOriginalContentID) {
			_setOriginalContentID = true;

			_originalContentID = _contentID;
		}

		_contentID = contentID;
	}

	public long getOriginalContentID() {
		return _originalContentID;
	}

	@JSON
	@Override
	public long getHeadID() {
		return _headID;
	}

	@Override
	public void setHeadID(long headID) {
		_columnBitmask |= HEADID_COLUMN_BITMASK;

		if (!_setOriginalHeadID) {
			_setOriginalHeadID = true;

			_originalHeadID = _headID;
		}

		_headID = headID;
	}

	public long getOriginalHeadID() {
		return _originalHeadID;
	}

	@JSON
	@Override
	public long getColumnID() {
		return _columnID;
	}

	@Override
	public void setColumnID(long columnID) {
		_columnBitmask |= COLUMNID_COLUMN_BITMASK;

		if (!_setOriginalColumnID) {
			_setOriginalColumnID = true;

			_originalColumnID = _columnID;
		}

		_columnID = columnID;
	}

	public long getOriginalColumnID() {
		return _originalColumnID;
	}

	@JSON
	@Override
	public long getRowID() {
		return _rowID;
	}

	@Override
	public void setRowID(long rowID) {
		_columnBitmask |= ROWID_COLUMN_BITMASK;

		if (!_setOriginalRowID) {
			_setOriginalRowID = true;

			_originalRowID = _rowID;
		}

		_rowID = rowID;
	}

	public long getOriginalRowID() {
		return _originalRowID;
	}

	@JSON
	@Override
	public String getCellContent() {
		if (_cellContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _cellContent;
		}
	}

	@Override
	public void setCellContent(String cellContent) {
		_columnBitmask |= CELLCONTENT_COLUMN_BITMASK;

		if (_originalCellContent == null) {
			_originalCellContent = _cellContent;
		}

		_cellContent = cellContent;
	}

	public String getOriginalCellContent() {
		return GetterUtil.getString(_originalCellContent);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Content.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Content toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Content)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContentImpl contentImpl = new ContentImpl();

		contentImpl.setContentID(getContentID());
		contentImpl.setHeadID(getHeadID());
		contentImpl.setColumnID(getColumnID());
		contentImpl.setRowID(getRowID());
		contentImpl.setCellContent(getCellContent());

		contentImpl.resetOriginalValues();

		return contentImpl;
	}

	@Override
	public int compareTo(Content content) {
		int value = 0;

		if (getContentID() < content.getContentID()) {
			value = -1;
		}
		else if (getContentID() > content.getContentID()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Content)) {
			return false;
		}

		Content content = (Content)obj;

		long primaryKey = content.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ContentModelImpl contentModelImpl = this;

		contentModelImpl._originalContentID = contentModelImpl._contentID;

		contentModelImpl._setOriginalContentID = false;

		contentModelImpl._originalHeadID = contentModelImpl._headID;

		contentModelImpl._setOriginalHeadID = false;

		contentModelImpl._originalColumnID = contentModelImpl._columnID;

		contentModelImpl._setOriginalColumnID = false;

		contentModelImpl._originalRowID = contentModelImpl._rowID;

		contentModelImpl._setOriginalRowID = false;

		contentModelImpl._originalCellContent = contentModelImpl._cellContent;

		contentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Content> toCacheModel() {
		ContentCacheModel contentCacheModel = new ContentCacheModel();

		contentCacheModel.contentID = getContentID();

		contentCacheModel.headID = getHeadID();

		contentCacheModel.columnID = getColumnID();

		contentCacheModel.rowID = getRowID();

		contentCacheModel.cellContent = getCellContent();

		String cellContent = contentCacheModel.cellContent;

		if ((cellContent != null) && (cellContent.length() == 0)) {
			contentCacheModel.cellContent = null;
		}

		return contentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{contentID=");
		sb.append(getContentID());
		sb.append(", headID=");
		sb.append(getHeadID());
		sb.append(", columnID=");
		sb.append(getColumnID());
		sb.append(", rowID=");
		sb.append(getRowID());
		sb.append(", cellContent=");
		sb.append(getCellContent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.Content");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>contentID</column-name><column-value><![CDATA[");
		sb.append(getContentID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>headID</column-name><column-value><![CDATA[");
		sb.append(getHeadID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columnID</column-name><column-value><![CDATA[");
		sb.append(getColumnID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rowID</column-name><column-value><![CDATA[");
		sb.append(getRowID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cellContent</column-name><column-value><![CDATA[");
		sb.append(getCellContent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Content.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Content.class
		};
	private long _contentID;
	private long _originalContentID;
	private boolean _setOriginalContentID;
	private long _headID;
	private long _originalHeadID;
	private boolean _setOriginalHeadID;
	private long _columnID;
	private long _originalColumnID;
	private boolean _setOriginalColumnID;
	private long _rowID;
	private long _originalRowID;
	private boolean _setOriginalRowID;
	private String _cellContent;
	private String _originalCellContent;
	private long _columnBitmask;
	private Content _escapedModel;
}