/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.gfbio.model.SearchHistory;

import org.gfbio.service.SearchHistoryLocalService;
import org.gfbio.service.persistence.SearchFeedbackPersistence;
import org.gfbio.service.persistence.SearchHistoryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the search history local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.gfbio.service.impl.SearchHistoryLocalServiceImpl}.
 * </p>
 *
 * @author Kobkaew Opasjumruskit
 * @see org.gfbio.service.impl.SearchHistoryLocalServiceImpl
 * @see org.gfbio.service.SearchHistoryLocalServiceUtil
 * @generated
 */
public abstract class SearchHistoryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SearchHistoryLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.gfbio.service.SearchHistoryLocalServiceUtil} to access the search history local service.
	 */

	/**
	 * Adds the search history to the database. Also notifies the appropriate model listeners.
	 *
	 * @param searchHistory the search history
	 * @return the search history that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SearchHistory addSearchHistory(SearchHistory searchHistory)
		throws SystemException {
		searchHistory.setNew(true);

		return searchHistoryPersistence.update(searchHistory);
	}

	/**
	 * Creates a new search history with the primary key. Does not add the search history to the database.
	 *
	 * @param searchHistoryID the primary key for the new search history
	 * @return the new search history
	 */
	@Override
	public SearchHistory createSearchHistory(long searchHistoryID) {
		return searchHistoryPersistence.create(searchHistoryID);
	}

	/**
	 * Deletes the search history with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param searchHistoryID the primary key of the search history
	 * @return the search history that was removed
	 * @throws PortalException if a search history with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SearchHistory deleteSearchHistory(long searchHistoryID)
		throws PortalException, SystemException {
		return searchHistoryPersistence.remove(searchHistoryID);
	}

	/**
	 * Deletes the search history from the database. Also notifies the appropriate model listeners.
	 *
	 * @param searchHistory the search history
	 * @return the search history that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SearchHistory deleteSearchHistory(SearchHistory searchHistory)
		throws SystemException {
		return searchHistoryPersistence.remove(searchHistory);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SearchHistory.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return searchHistoryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.gfbio.model.impl.SearchHistoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return searchHistoryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.gfbio.model.impl.SearchHistoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return searchHistoryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return searchHistoryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return searchHistoryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SearchHistory fetchSearchHistory(long searchHistoryID)
		throws SystemException {
		return searchHistoryPersistence.fetchByPrimaryKey(searchHistoryID);
	}

	/**
	 * Returns the search history with the primary key.
	 *
	 * @param searchHistoryID the primary key of the search history
	 * @return the search history
	 * @throws PortalException if a search history with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SearchHistory getSearchHistory(long searchHistoryID)
		throws PortalException, SystemException {
		return searchHistoryPersistence.findByPrimaryKey(searchHistoryID);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return searchHistoryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the search histories.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.gfbio.model.impl.SearchHistoryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of search histories
	 * @param end the upper bound of the range of search histories (not inclusive)
	 * @return the range of search histories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SearchHistory> getSearchHistories(int start, int end)
		throws SystemException {
		return searchHistoryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of search histories.
	 *
	 * @return the number of search histories
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSearchHistoriesCount() throws SystemException {
		return searchHistoryPersistence.countAll();
	}

	/**
	 * Updates the search history in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param searchHistory the search history
	 * @return the search history that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SearchHistory updateSearchHistory(SearchHistory searchHistory)
		throws SystemException {
		return searchHistoryPersistence.update(searchHistory);
	}

	/**
	 * Returns the search feedback local service.
	 *
	 * @return the search feedback local service
	 */
	public org.gfbio.service.SearchFeedbackLocalService getSearchFeedbackLocalService() {
		return searchFeedbackLocalService;
	}

	/**
	 * Sets the search feedback local service.
	 *
	 * @param searchFeedbackLocalService the search feedback local service
	 */
	public void setSearchFeedbackLocalService(
		org.gfbio.service.SearchFeedbackLocalService searchFeedbackLocalService) {
		this.searchFeedbackLocalService = searchFeedbackLocalService;
	}

	/**
	 * Returns the search feedback remote service.
	 *
	 * @return the search feedback remote service
	 */
	public org.gfbio.service.SearchFeedbackService getSearchFeedbackService() {
		return searchFeedbackService;
	}

	/**
	 * Sets the search feedback remote service.
	 *
	 * @param searchFeedbackService the search feedback remote service
	 */
	public void setSearchFeedbackService(
		org.gfbio.service.SearchFeedbackService searchFeedbackService) {
		this.searchFeedbackService = searchFeedbackService;
	}

	/**
	 * Returns the search feedback persistence.
	 *
	 * @return the search feedback persistence
	 */
	public SearchFeedbackPersistence getSearchFeedbackPersistence() {
		return searchFeedbackPersistence;
	}

	/**
	 * Sets the search feedback persistence.
	 *
	 * @param searchFeedbackPersistence the search feedback persistence
	 */
	public void setSearchFeedbackPersistence(
		SearchFeedbackPersistence searchFeedbackPersistence) {
		this.searchFeedbackPersistence = searchFeedbackPersistence;
	}

	/**
	 * Returns the search history local service.
	 *
	 * @return the search history local service
	 */
	public org.gfbio.service.SearchHistoryLocalService getSearchHistoryLocalService() {
		return searchHistoryLocalService;
	}

	/**
	 * Sets the search history local service.
	 *
	 * @param searchHistoryLocalService the search history local service
	 */
	public void setSearchHistoryLocalService(
		org.gfbio.service.SearchHistoryLocalService searchHistoryLocalService) {
		this.searchHistoryLocalService = searchHistoryLocalService;
	}

	/**
	 * Returns the search history remote service.
	 *
	 * @return the search history remote service
	 */
	public org.gfbio.service.SearchHistoryService getSearchHistoryService() {
		return searchHistoryService;
	}

	/**
	 * Sets the search history remote service.
	 *
	 * @param searchHistoryService the search history remote service
	 */
	public void setSearchHistoryService(
		org.gfbio.service.SearchHistoryService searchHistoryService) {
		this.searchHistoryService = searchHistoryService;
	}

	/**
	 * Returns the search history persistence.
	 *
	 * @return the search history persistence
	 */
	public SearchHistoryPersistence getSearchHistoryPersistence() {
		return searchHistoryPersistence;
	}

	/**
	 * Sets the search history persistence.
	 *
	 * @param searchHistoryPersistence the search history persistence
	 */
	public void setSearchHistoryPersistence(
		SearchHistoryPersistence searchHistoryPersistence) {
		this.searchHistoryPersistence = searchHistoryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.gfbio.model.SearchHistory",
			searchHistoryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.gfbio.model.SearchHistory");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SearchHistory.class;
	}

	protected String getModelClassName() {
		return SearchHistory.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = searchHistoryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.gfbio.service.SearchFeedbackLocalService.class)
	protected org.gfbio.service.SearchFeedbackLocalService searchFeedbackLocalService;
	@BeanReference(type = org.gfbio.service.SearchFeedbackService.class)
	protected org.gfbio.service.SearchFeedbackService searchFeedbackService;
	@BeanReference(type = SearchFeedbackPersistence.class)
	protected SearchFeedbackPersistence searchFeedbackPersistence;
	@BeanReference(type = org.gfbio.service.SearchHistoryLocalService.class)
	protected org.gfbio.service.SearchHistoryLocalService searchHistoryLocalService;
	@BeanReference(type = org.gfbio.service.SearchHistoryService.class)
	protected org.gfbio.service.SearchHistoryService searchHistoryService;
	@BeanReference(type = SearchHistoryPersistence.class)
	protected SearchHistoryPersistence searchHistoryPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SearchHistoryLocalServiceClpInvoker _clpInvoker = new SearchHistoryLocalServiceClpInvoker();
}