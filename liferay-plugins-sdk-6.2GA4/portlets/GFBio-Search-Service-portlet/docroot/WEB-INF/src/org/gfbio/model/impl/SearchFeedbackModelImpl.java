/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.gfbio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.gfbio.model.SearchFeedback;
import org.gfbio.model.SearchFeedbackModel;
import org.gfbio.model.SearchFeedbackSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SearchFeedback service. Represents a row in the &quot;gfbio_SearchFeedback&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.gfbio.model.SearchFeedbackModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SearchFeedbackImpl}.
 * </p>
 *
 * @author Kobkaew Opasjumruskit
 * @see SearchFeedbackImpl
 * @see org.gfbio.model.SearchFeedback
 * @see org.gfbio.model.SearchFeedbackModel
 * @generated
 */
@JSON(strict = true)
public class SearchFeedbackModelImpl extends BaseModelImpl<SearchFeedback>
	implements SearchFeedbackModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a search feedback model instance should use the {@link org.gfbio.model.SearchFeedback} interface instead.
	 */
	public static final String TABLE_NAME = "gfbio_SearchFeedback";
	public static final Object[][] TABLE_COLUMNS = {
			{ "searchFeedbackID", Types.BIGINT },
			{ "userID", Types.BIGINT },
			{ "queryString", Types.VARCHAR },
			{ "queryFilter", Types.VARCHAR },
			{ "datasetDetail", Types.VARCHAR },
			{ "datasetRank", Types.BIGINT },
			{ "rating", Types.INTEGER },
			{ "lastModifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table gfbio_SearchFeedback (searchFeedbackID LONG not null primary key,userID LONG,queryString VARCHAR(75) null,queryFilter VARCHAR(75) null,datasetDetail VARCHAR(75) null,datasetRank LONG,rating INTEGER,lastModifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table gfbio_SearchFeedback";
	public static final String ORDER_BY_JPQL = " ORDER BY searchFeedback.lastModifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY gfbio_SearchFeedback.lastModifiedDate DESC";
	public static final String DATA_SOURCE = "gfbioDataSource";
	public static final String SESSION_FACTORY = "gfbioSessionFactory";
	public static final String TX_MANAGER = "gfbioTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.gfbio.model.SearchFeedback"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.gfbio.model.SearchFeedback"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.gfbio.model.SearchFeedback"),
			true);
	public static long LASTMODIFIEDDATE_COLUMN_BITMASK = 1L;
	public static long QUERYSTRING_COLUMN_BITMASK = 2L;
	public static long RATING_COLUMN_BITMASK = 4L;
	public static long SEARCHFEEDBACKID_COLUMN_BITMASK = 8L;
	public static long USERID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SearchFeedback toModel(SearchFeedbackSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SearchFeedback model = new SearchFeedbackImpl();

		model.setSearchFeedbackID(soapModel.getSearchFeedbackID());
		model.setUserID(soapModel.getUserID());
		model.setQueryString(soapModel.getQueryString());
		model.setQueryFilter(soapModel.getQueryFilter());
		model.setDatasetDetail(soapModel.getDatasetDetail());
		model.setDatasetRank(soapModel.getDatasetRank());
		model.setRating(soapModel.getRating());
		model.setLastModifiedDate(soapModel.getLastModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SearchFeedback> toModels(SearchFeedbackSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SearchFeedback> models = new ArrayList<SearchFeedback>(soapModels.length);

		for (SearchFeedbackSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.gfbio.model.SearchFeedback"));

	public SearchFeedbackModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _searchFeedbackID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSearchFeedbackID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _searchFeedbackID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SearchFeedback.class;
	}

	@Override
	public String getModelClassName() {
		return SearchFeedback.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("searchFeedbackID", getSearchFeedbackID());
		attributes.put("userID", getUserID());
		attributes.put("queryString", getQueryString());
		attributes.put("queryFilter", getQueryFilter());
		attributes.put("datasetDetail", getDatasetDetail());
		attributes.put("datasetRank", getDatasetRank());
		attributes.put("rating", getRating());
		attributes.put("lastModifiedDate", getLastModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long searchFeedbackID = (Long)attributes.get("searchFeedbackID");

		if (searchFeedbackID != null) {
			setSearchFeedbackID(searchFeedbackID);
		}

		Long userID = (Long)attributes.get("userID");

		if (userID != null) {
			setUserID(userID);
		}

		String queryString = (String)attributes.get("queryString");

		if (queryString != null) {
			setQueryString(queryString);
		}

		String queryFilter = (String)attributes.get("queryFilter");

		if (queryFilter != null) {
			setQueryFilter(queryFilter);
		}

		String datasetDetail = (String)attributes.get("datasetDetail");

		if (datasetDetail != null) {
			setDatasetDetail(datasetDetail);
		}

		Long datasetRank = (Long)attributes.get("datasetRank");

		if (datasetRank != null) {
			setDatasetRank(datasetRank);
		}

		Integer rating = (Integer)attributes.get("rating");

		if (rating != null) {
			setRating(rating);
		}

		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}
	}

	@JSON
	@Override
	public long getSearchFeedbackID() {
		return _searchFeedbackID;
	}

	@Override
	public void setSearchFeedbackID(long searchFeedbackID) {
		_columnBitmask |= SEARCHFEEDBACKID_COLUMN_BITMASK;

		if (!_setOriginalSearchFeedbackID) {
			_setOriginalSearchFeedbackID = true;

			_originalSearchFeedbackID = _searchFeedbackID;
		}

		_searchFeedbackID = searchFeedbackID;
	}

	public long getOriginalSearchFeedbackID() {
		return _originalSearchFeedbackID;
	}

	@JSON
	@Override
	public long getUserID() {
		return _userID;
	}

	@Override
	public void setUserID(long userID) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserID) {
			_setOriginalUserID = true;

			_originalUserID = _userID;
		}

		_userID = userID;
	}

	public long getOriginalUserID() {
		return _originalUserID;
	}

	@JSON
	@Override
	public String getQueryString() {
		if (_queryString == null) {
			return StringPool.BLANK;
		}
		else {
			return _queryString;
		}
	}

	@Override
	public void setQueryString(String queryString) {
		_columnBitmask |= QUERYSTRING_COLUMN_BITMASK;

		if (_originalQueryString == null) {
			_originalQueryString = _queryString;
		}

		_queryString = queryString;
	}

	public String getOriginalQueryString() {
		return GetterUtil.getString(_originalQueryString);
	}

	@JSON
	@Override
	public String getQueryFilter() {
		if (_queryFilter == null) {
			return StringPool.BLANK;
		}
		else {
			return _queryFilter;
		}
	}

	@Override
	public void setQueryFilter(String queryFilter) {
		_queryFilter = queryFilter;
	}

	@JSON
	@Override
	public String getDatasetDetail() {
		if (_datasetDetail == null) {
			return StringPool.BLANK;
		}
		else {
			return _datasetDetail;
		}
	}

	@Override
	public void setDatasetDetail(String datasetDetail) {
		_datasetDetail = datasetDetail;
	}

	@JSON
	@Override
	public long getDatasetRank() {
		return _datasetRank;
	}

	@Override
	public void setDatasetRank(long datasetRank) {
		_datasetRank = datasetRank;
	}

	@JSON
	@Override
	public int getRating() {
		return _rating;
	}

	@Override
	public void setRating(int rating) {
		_columnBitmask |= RATING_COLUMN_BITMASK;

		if (!_setOriginalRating) {
			_setOriginalRating = true;

			_originalRating = _rating;
		}

		_rating = rating;
	}

	public int getOriginalRating() {
		return _originalRating;
	}

	@JSON
	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_columnBitmask = -1L;

		if (_originalLastModifiedDate == null) {
			_originalLastModifiedDate = _lastModifiedDate;
		}

		_lastModifiedDate = lastModifiedDate;
	}

	public Date getOriginalLastModifiedDate() {
		return _originalLastModifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SearchFeedback.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SearchFeedback toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SearchFeedback)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SearchFeedbackImpl searchFeedbackImpl = new SearchFeedbackImpl();

		searchFeedbackImpl.setSearchFeedbackID(getSearchFeedbackID());
		searchFeedbackImpl.setUserID(getUserID());
		searchFeedbackImpl.setQueryString(getQueryString());
		searchFeedbackImpl.setQueryFilter(getQueryFilter());
		searchFeedbackImpl.setDatasetDetail(getDatasetDetail());
		searchFeedbackImpl.setDatasetRank(getDatasetRank());
		searchFeedbackImpl.setRating(getRating());
		searchFeedbackImpl.setLastModifiedDate(getLastModifiedDate());

		searchFeedbackImpl.resetOriginalValues();

		return searchFeedbackImpl;
	}

	@Override
	public int compareTo(SearchFeedback searchFeedback) {
		int value = 0;

		value = DateUtil.compareTo(getLastModifiedDate(),
				searchFeedback.getLastModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SearchFeedback)) {
			return false;
		}

		SearchFeedback searchFeedback = (SearchFeedback)obj;

		long primaryKey = searchFeedback.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SearchFeedbackModelImpl searchFeedbackModelImpl = this;

		searchFeedbackModelImpl._originalSearchFeedbackID = searchFeedbackModelImpl._searchFeedbackID;

		searchFeedbackModelImpl._setOriginalSearchFeedbackID = false;

		searchFeedbackModelImpl._originalUserID = searchFeedbackModelImpl._userID;

		searchFeedbackModelImpl._setOriginalUserID = false;

		searchFeedbackModelImpl._originalQueryString = searchFeedbackModelImpl._queryString;

		searchFeedbackModelImpl._originalRating = searchFeedbackModelImpl._rating;

		searchFeedbackModelImpl._setOriginalRating = false;

		searchFeedbackModelImpl._originalLastModifiedDate = searchFeedbackModelImpl._lastModifiedDate;

		searchFeedbackModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SearchFeedback> toCacheModel() {
		SearchFeedbackCacheModel searchFeedbackCacheModel = new SearchFeedbackCacheModel();

		searchFeedbackCacheModel.searchFeedbackID = getSearchFeedbackID();

		searchFeedbackCacheModel.userID = getUserID();

		searchFeedbackCacheModel.queryString = getQueryString();

		String queryString = searchFeedbackCacheModel.queryString;

		if ((queryString != null) && (queryString.length() == 0)) {
			searchFeedbackCacheModel.queryString = null;
		}

		searchFeedbackCacheModel.queryFilter = getQueryFilter();

		String queryFilter = searchFeedbackCacheModel.queryFilter;

		if ((queryFilter != null) && (queryFilter.length() == 0)) {
			searchFeedbackCacheModel.queryFilter = null;
		}

		searchFeedbackCacheModel.datasetDetail = getDatasetDetail();

		String datasetDetail = searchFeedbackCacheModel.datasetDetail;

		if ((datasetDetail != null) && (datasetDetail.length() == 0)) {
			searchFeedbackCacheModel.datasetDetail = null;
		}

		searchFeedbackCacheModel.datasetRank = getDatasetRank();

		searchFeedbackCacheModel.rating = getRating();

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			searchFeedbackCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			searchFeedbackCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		return searchFeedbackCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{searchFeedbackID=");
		sb.append(getSearchFeedbackID());
		sb.append(", userID=");
		sb.append(getUserID());
		sb.append(", queryString=");
		sb.append(getQueryString());
		sb.append(", queryFilter=");
		sb.append(getQueryFilter());
		sb.append(", datasetDetail=");
		sb.append(getDatasetDetail());
		sb.append(", datasetRank=");
		sb.append(getDatasetRank());
		sb.append(", rating=");
		sb.append(getRating());
		sb.append(", lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.gfbio.model.SearchFeedback");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>searchFeedbackID</column-name><column-value><![CDATA[");
		sb.append(getSearchFeedbackID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userID</column-name><column-value><![CDATA[");
		sb.append(getUserID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queryString</column-name><column-value><![CDATA[");
		sb.append(getQueryString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>queryFilter</column-name><column-value><![CDATA[");
		sb.append(getQueryFilter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>datasetDetail</column-name><column-value><![CDATA[");
		sb.append(getDatasetDetail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>datasetRank</column-name><column-value><![CDATA[");
		sb.append(getDatasetRank());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rating</column-name><column-value><![CDATA[");
		sb.append(getRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SearchFeedback.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SearchFeedback.class
		};
	private long _searchFeedbackID;
	private long _originalSearchFeedbackID;
	private boolean _setOriginalSearchFeedbackID;
	private long _userID;
	private long _originalUserID;
	private boolean _setOriginalUserID;
	private String _queryString;
	private String _originalQueryString;
	private String _queryFilter;
	private String _datasetDetail;
	private long _datasetRank;
	private int _rating;
	private int _originalRating;
	private boolean _setOriginalRating;
	private Date _lastModifiedDate;
	private Date _originalLastModifiedDate;
	private long _columnBitmask;
	private SearchFeedback _escapedModel;
}